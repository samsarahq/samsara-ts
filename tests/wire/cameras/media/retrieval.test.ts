/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../mock-server/MockServerPool.js";
import { SamsaraApiClient } from "../../../../src/Client";

describe("Retrieval", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraApiClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                media: [
                    {
                        availableAtTime: "2019-11-11T14:00:12-04:00",
                        endTime: "2019-06-13T19:08:25Z",
                        input: "dashcamDriverFacing",
                        mediaType: "image",
                        startTime: "2019-06-13T19:08:25Z",
                        status: "available",
                        urlInfo: {
                            url: "https://sample.s3.url.com/image.jpeg",
                            urlExpiryTime: "2019-11-11T14:00:12-04:00",
                        },
                        vehicleId: "1234",
                    },
                ],
            },
        };
        server
            .mockEndpoint()
            .get("/cameras/media/retrieval")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.cameras.media.retrieval.get({
            retrievalId: "retrievalId",
        });
        expect(response).toEqual({
            data: {
                media: [
                    {
                        availableAtTime: "2019-11-11T14:00:12-04:00",
                        endTime: "2019-06-13T19:08:25Z",
                        input: "dashcamDriverFacing",
                        mediaType: "image",
                        startTime: "2019-06-13T19:08:25Z",
                        status: "available",
                        urlInfo: {
                            url: "https://sample.s3.url.com/image.jpeg",
                            urlExpiryTime: "2019-11-11T14:00:12-04:00",
                        },
                        vehicleId: "1234",
                    },
                ],
            },
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraApiClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });
        const rawRequestBody = {
            endTime: "2019-06-13T19:08:55Z",
            inputs: ["dashcamRoadFacing", "dashcamRoadFacing"],
            mediaType: "image",
            startTime: "2019-06-13T19:08:25Z",
            vehicleId: "1234",
        };
        const rawResponseBody = {
            data: {
                quotaStatus: "Current monthly usage is 80000.4 seconds of high-res video out of 900000.0 available.",
                retrievalId: "2308cec4-82e0-46f1-8b3c-a3592e5cc21e",
            },
        };
        server
            .mockEndpoint()
            .post("/cameras/media/retrieval")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.cameras.media.retrieval.create({
            endTime: "2019-06-13T19:08:55Z",
            inputs: ["dashcamRoadFacing", "dashcamRoadFacing"],
            mediaType: "image",
            startTime: "2019-06-13T19:08:25Z",
            vehicleId: "1234",
        });
        expect(response).toEqual({
            data: {
                quotaStatus: "Current monthly usage is 80000.4 seconds of high-res video out of 900000.0 available.",
                retrievalId: "2308cec4-82e0-46f1-8b3c-a3592e5cc21e",
            },
        });
    });
});
