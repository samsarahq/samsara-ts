/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { SamsaraApiClient } from "../../src/Client";

describe("Users", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraApiClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });
        const rawRequestBody = {
            authType: "default",
            email: "user@company.com",
            name: "Bob Smith",
            roles: [{ roleId: "8a9371af-82d1-4158-bf91-4ecc8d3a114c" }],
        };
        const rawResponseBody = {
            data: {
                authType: "default",
                email: "user@company.com",
                id: "123",
                name: "Bob Smith",
                roles: [{ expireAt: "2025-08-13T19:08:25Z" }],
            },
        };
        server
            .mockEndpoint()
            .post("/users")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.create({
            authType: "default",
            email: "user@company.com",
            name: "Bob Smith",
            roles: [
                {
                    roleId: "8a9371af-82d1-4158-bf91-4ecc8d3a114c",
                },
            ],
        });
        expect(response).toEqual({
            data: {
                authType: "default",
                email: "user@company.com",
                id: "123",
                name: "Bob Smith",
                roles: [
                    {
                        expireAt: "2025-08-13T19:08:25Z",
                    },
                ],
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraApiClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                authType: "default",
                email: "user@company.com",
                id: "123",
                name: "Bob Smith",
                roles: [{ expireAt: "2025-08-13T19:08:25Z" }],
            },
        };
        server.mockEndpoint().get("/users/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.users.get("id");
        expect(response).toEqual({
            data: {
                authType: "default",
                email: "user@company.com",
                id: "123",
                name: "Bob Smith",
                roles: [
                    {
                        expireAt: "2025-08-13T19:08:25Z",
                    },
                ],
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraApiClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/users/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.users.delete("id");
        expect(response).toEqual({
            key: "value",
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraApiClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            data: {
                authType: "default",
                email: "user@company.com",
                id: "123",
                name: "Bob Smith",
                roles: [{ expireAt: "2025-08-13T19:08:25Z" }],
            },
        };
        server
            .mockEndpoint()
            .patch("/users/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.update("id");
        expect(response).toEqual({
            data: {
                authType: "default",
                email: "user@company.com",
                id: "123",
                name: "Bob Smith",
                roles: [
                    {
                        expireAt: "2025-08-13T19:08:25Z",
                    },
                ],
            },
        });
    });
});
