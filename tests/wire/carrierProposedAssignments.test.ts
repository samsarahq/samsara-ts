/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { SamsaraClient } from "../../src/Client";

describe("CarrierProposedAssignments", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });
        const rawRequestBody = { driverId: "42", vehicleId: "123" };
        const rawResponseBody = {
            data: {
                acceptedTime: "2020-01-27T07:06:25Z",
                activeTime: "2020-01-27T07:06:25Z",
                driver: {
                    externalIds: { maintenanceId: "250020", payrollId: "ABFS18600" },
                    id: "88668",
                    name: "Susan Bob",
                },
                firstSeenTime: "2020-01-27T07:06:25Z",
                id: "08b3aeada5f4ab3010c0b4efa28d2d1890dbf8d48d2d",
                rejectedTime: "2020-01-27T07:06:25Z",
                shippingDocs: "Delivery 123, chips and soda",
                trailers: [
                    {
                        externalIds: { maintenanceId: "250020", payrollId: "ABFS18600" },
                        id: "123456789",
                        name: "Midwest Trailer #5",
                    },
                ],
                vehicle: {
                    ExternalIds: { maintenanceId: "250020", payrollId: "ABFS18600" },
                    id: "123456789",
                    name: "Midwest Truck #4",
                },
            },
        };
        server
            .mockEndpoint()
            .post("/fleet/carrier-proposed-assignments")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.carrierProposedAssignments.create({
            driverId: "42",
            vehicleId: "123",
        });
        expect(response).toEqual({
            data: {
                acceptedTime: "2020-01-27T07:06:25Z",
                activeTime: "2020-01-27T07:06:25Z",
                driver: {
                    externalIds: {
                        maintenanceId: "250020",
                        payrollId: "ABFS18600",
                    },
                    id: "88668",
                    name: "Susan Bob",
                },
                firstSeenTime: "2020-01-27T07:06:25Z",
                id: "08b3aeada5f4ab3010c0b4efa28d2d1890dbf8d48d2d",
                rejectedTime: "2020-01-27T07:06:25Z",
                shippingDocs: "Delivery 123, chips and soda",
                trailers: [
                    {
                        externalIds: {
                            maintenanceId: "250020",
                            payrollId: "ABFS18600",
                        },
                        id: "123456789",
                        name: "Midwest Trailer #5",
                    },
                ],
                vehicle: {
                    ExternalIds: {
                        maintenanceId: "250020",
                        payrollId: "ABFS18600",
                    },
                    id: "123456789",
                    name: "Midwest Truck #4",
                },
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/fleet/carrier-proposed-assignments/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.carrierProposedAssignments.delete("id");
        expect(response).toEqual({
            key: "value",
        });
    });
});
