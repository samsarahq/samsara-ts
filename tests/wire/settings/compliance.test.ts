/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { SamsaraApiClient } from "../../../src/Client";

describe("Compliance", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraApiClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                allowUnregulatedVehiclesEnabled: false,
                canadaHosEnabled: true,
                carrierName: "ABC Trucking",
                dotNumber: 12345678,
                driverAutoDutyEnabled: false,
                editCertifiedLogsEnabled: false,
                forceManualLocationForDutyStatusChangesEnabled: false,
                forceReviewUnassignedHosEnabled: true,
                mainOfficeFormattedAddress: "123 Main Street",
                persistentDutyStatusEnabled: false,
            },
        };
        server
            .mockEndpoint()
            .get("/fleet/settings/compliance")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.settings.compliance.get();
        expect(response).toEqual({
            data: {
                allowUnregulatedVehiclesEnabled: false,
                canadaHosEnabled: true,
                carrierName: "ABC Trucking",
                dotNumber: 12345678,
                driverAutoDutyEnabled: false,
                editCertifiedLogsEnabled: false,
                forceManualLocationForDutyStatusChangesEnabled: false,
                forceReviewUnassignedHosEnabled: true,
                mainOfficeFormattedAddress: "123 Main Street",
                persistentDutyStatusEnabled: false,
            },
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraApiClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            data: {
                allowUnregulatedVehiclesEnabled: false,
                canadaHosEnabled: true,
                carrierName: "ABC Trucking",
                dotNumber: 12345678,
                driverAutoDutyEnabled: false,
                editCertifiedLogsEnabled: false,
                forceManualLocationForDutyStatusChangesEnabled: false,
                forceReviewUnassignedHosEnabled: true,
                mainOfficeFormattedAddress: "123 Main Street",
                persistentDutyStatusEnabled: false,
            },
        };
        server
            .mockEndpoint()
            .patch("/fleet/settings/compliance")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.settings.compliance.update();
        expect(response).toEqual({
            data: {
                allowUnregulatedVehiclesEnabled: false,
                canadaHosEnabled: true,
                carrierName: "ABC Trucking",
                dotNumber: 12345678,
                driverAutoDutyEnabled: false,
                editCertifiedLogsEnabled: false,
                forceManualLocationForDutyStatusChangesEnabled: false,
                forceReviewUnassignedHosEnabled: true,
                mainOfficeFormattedAddress: "123 Main Street",
                persistentDutyStatusEnabled: false,
            },
        });
    });
});
