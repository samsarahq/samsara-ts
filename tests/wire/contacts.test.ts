/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { SamsaraClient } from "../../src/Client";

describe("Contacts", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            data: {
                email: "jane.jones@yahoo.com",
                firstName: "Jane",
                id: "22408",
                lastName: "Jones",
                phone: "111-222-3344",
            },
        };
        server
            .mockEndpoint()
            .post("/contacts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.contacts.create();
        expect(response).toEqual({
            data: {
                email: "jane.jones@yahoo.com",
                firstName: "Jane",
                id: "22408",
                lastName: "Jones",
                phone: "111-222-3344",
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                email: "jane.jones@yahoo.com",
                firstName: "Jane",
                id: "22408",
                lastName: "Jones",
                phone: "111-222-3344",
            },
        };
        server.mockEndpoint().get("/contacts/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.contacts.get("id");
        expect(response).toEqual({
            data: {
                email: "jane.jones@yahoo.com",
                firstName: "Jane",
                id: "22408",
                lastName: "Jones",
                phone: "111-222-3344",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/contacts/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.contacts.delete("id");
        expect(response).toEqual({
            key: "value",
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            data: {
                email: "jane.jones@yahoo.com",
                firstName: "Jane",
                id: "22408",
                lastName: "Jones",
                phone: "111-222-3344",
            },
        };
        server
            .mockEndpoint()
            .patch("/contacts/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.contacts.update("id");
        expect(response).toEqual({
            data: {
                email: "jane.jones@yahoo.com",
                firstName: "Jane",
                id: "22408",
                lastName: "Jones",
                phone: "111-222-3344",
            },
        });
    });
});
