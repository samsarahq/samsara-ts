/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Samsara from "../index.js";

/**
 * An idling event object.
 */
export interface IdlingEventObjectResponseBody {
    /** The ID of the geofence address of the idling location, if applicable. It will be the address at the time of idling. */
    addressId?: string;
    /** The type of the geofence address of the idling location, if applicable.  Valid values: `agricultureSource`, `alertsOnly`, `industrialSite`, `riskZone`, `shortHaul`, `undefined`, `workforceSite`, `yard` */
    addressType?: IdlingEventObjectResponseBody.AddressType;
    /** The air temperature in millicelsius during the idling event. Value is returned only when it is known. */
    airTemperatureMillicelsius?: number;
    /** Samsara ID of the asset assigned to the event. Returns vehicle ID at this time. */
    assetId: number;
    /** The duration of the idling event in milliseconds. */
    durationMilliseconds: number;
    /** Universally unique identifier of the idling event. */
    eventUuid: string;
    /** The amount of fuel consumed in milliliters during the idling event. */
    fuelConsumedMilliliters: number;
    fuelCost: Samsara.FuelCostObjectResponseBody;
    /** The amount of gaseous fuel consumed in grams during the idling event. */
    gaseousFuelConsumedGrams: number;
    gaseousFuelCost: Samsara.GaseousFuelCostObjectResponseBody;
    /** Samsara ID of the operator assigned the event. Returns driver ID at this time. Value is returned when the driver is assigned to the vehicle. */
    operatorId?: number;
    /** The PTO (Power Take-Off) state during the idling event.  Valid values: `active, inactive` */
    ptoState: "active, inactive";
    /** The start time of the idling event in RFC 3339 format. */
    startTime: string;
}

export namespace IdlingEventObjectResponseBody {
    /**
     * The type of the geofence address of the idling location, if applicable.  Valid values: `agricultureSource`, `alertsOnly`, `industrialSite`, `riskZone`, `shortHaul`, `undefined`, `workforceSite`, `yard`
     */
    export type AddressType =
        | "agricultureSource"
        | "alertsOnly"
        | "industrialSite"
        | "riskZone"
        | "shortHaul"
        | "undefined"
        | "workforceSite"
        | "yard";
    export const AddressType = {
        AgricultureSource: "agricultureSource",
        AlertsOnly: "alertsOnly",
        IndustrialSite: "industrialSite",
        RiskZone: "riskZone",
        ShortHaul: "shortHaul",
        Undefined: "undefined",
        WorkforceSite: "workforceSite",
        Yard: "yard",
    } as const;
}
