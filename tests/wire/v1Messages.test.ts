/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { SamsaraApiClient } from "../../src/Client";

describe("V1Messages", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraApiClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    driverId: 555,
                    isRead: true,
                    sender: { name: "John Doe", type: "dispatch" },
                    sentAtMs: 1462881998034,
                    text: "This is a message.",
                },
            ],
        };
        server.mockEndpoint().get("/v1/fleet/messages").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.v1Messages.list();
        expect(response).toEqual({
            data: [
                {
                    driverId: 555,
                    isRead: true,
                    sender: {
                        name: "John Doe",
                        type: "dispatch",
                    },
                    sentAtMs: 1462881998034,
                    text: "This is a message.",
                },
            ],
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraApiClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });
        const rawRequestBody = { driverIds: [111, 222, 333], text: "This is a message." };
        const rawResponseBody = { data: [{ driverId: 555, text: "This is a message." }] };
        server
            .mockEndpoint()
            .post("/v1/fleet/messages")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.v1Messages.create({
            driverIds: [111, 222, 333],
            text: "This is a message.",
        });
        expect(response).toEqual({
            data: [
                {
                    driverId: 555,
                    text: "This is a message.",
                },
            ],
        });
    });
});
