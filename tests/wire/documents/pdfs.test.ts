/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { SamsaraClient } from "../../../src/Client";

describe("Pdfs", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });
        const rawRequestBody = { documentId: "6c8c0c01-206a-41a4-9d21-15b9978d04cb" };
        const rawResponseBody = {
            data: { documentId: "6c8c0c01-206a-41a4-9d21-15b9978d04cb", id: "5c8c0c01-206a-41a4-9d21-15b9978d04cb" },
        };
        server
            .mockEndpoint()
            .post("/fleet/documents/pdfs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.documents.pdfs.create({
            documentId: "6c8c0c01-206a-41a4-9d21-15b9978d04cb",
        });
        expect(response).toEqual({
            data: {
                documentId: "6c8c0c01-206a-41a4-9d21-15b9978d04cb",
                id: "5c8c0c01-206a-41a4-9d21-15b9978d04cb",
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                completedAtTime: "2020-01-02T15:04:06+07:00",
                documentId: "6c8c0c01-206a-41a4-9d21-15b9978d04cb",
                downloadDocumentPdfUrl:
                    "https://samsara-driver-document-pdfs.s3.us-west-2.amazonaws.com/org/38487/42a4cffc-409d-4ddf-ba1c-5e3bbb961cba?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASI...&X-Amz-Date=20200423T162507Z&X-Amz-Expires=86400&X-Amz-Security-Token=IQoJ...-Amz-SignedHeaders=host&response-expires=2020-04-24T16%3A25%3A07Z&X-Amz-Signature=1c6fe87...",
                id: "5c8c0c01-206a-41a4-9d21-15b9978d04cb",
                jobStatus: "requested",
                requestedAtTime: "2020-01-02T15:04:05+07:00",
            },
        };
        server
            .mockEndpoint()
            .get("/fleet/documents/pdfs/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.documents.pdfs.get("id");
        expect(response).toEqual({
            data: {
                completedAtTime: "2020-01-02T15:04:06+07:00",
                documentId: "6c8c0c01-206a-41a4-9d21-15b9978d04cb",
                downloadDocumentPdfUrl:
                    "https://samsara-driver-document-pdfs.s3.us-west-2.amazonaws.com/org/38487/42a4cffc-409d-4ddf-ba1c-5e3bbb961cba?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASI...&X-Amz-Date=20200423T162507Z&X-Amz-Expires=86400&X-Amz-Security-Token=IQoJ...-Amz-SignedHeaders=host&response-expires=2020-04-24T16%3A25%3A07Z&X-Amz-Signature=1c6fe87...",
                id: "5c8c0c01-206a-41a4-9d21-15b9978d04cb",
                jobStatus: "requested",
                requestedAtTime: "2020-01-02T15:04:05+07:00",
            },
        });
    });
});
