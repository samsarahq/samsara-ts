/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../../../environments.js";
import * as core from "../../../../../../../../core/index.js";
import * as SamsaraApi from "../../../../../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../../../core/headers.js";
import urlJoin from "url-join";
import * as errors from "../../../../../../../../errors/index.js";

export declare namespace Retrieval {
    export interface Options {
        environment?: core.Supplier<environments.SamsaraApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-Samsara-Version header */
        version?: "2025-05-12";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        /** Override the X-Samsara-Version header */
        version?: "2025-05-12";
    }
}

export class Retrieval {
    protected readonly _options: Retrieval.Options;

    constructor(_options: Retrieval.Options = {}) {
        this._options = _options;
    }

    /**
     * This endpoint returns media information corresponding to a retrieval ID. Retrieval IDs are associated to prior [media retrieval requests](https://developers.samsara.com/reference/postmediaretrieval). Urls provided by this endpoint expire in 8 hours.
     *
     *  <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).
     *
     * To use this endpoint, select **Read Media Retrieval** under the Safety & Cameras category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>
     *
     *
     *  **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.
     *
     * @param {SamsaraApi.cameras.media.RetrievalGetRequest} request
     * @param {Retrieval.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SamsaraApi.UnauthorizedError}
     * @throws {@link SamsaraApi.NotFoundError}
     * @throws {@link SamsaraApi.MethodNotAllowedError}
     * @throws {@link SamsaraApi.TooManyRequestsError}
     * @throws {@link SamsaraApi.InternalServerError}
     * @throws {@link SamsaraApi.NotImplementedError}
     * @throws {@link SamsaraApi.BadGatewayError}
     * @throws {@link SamsaraApi.ServiceUnavailableError}
     * @throws {@link SamsaraApi.GatewayTimeoutError}
     *
     * @example
     *     await client.cameras.media.retrieval.get({
     *         retrievalId: "retrievalId"
     *     })
     */
    public get(
        request: SamsaraApi.cameras.media.RetrievalGetRequest,
        requestOptions?: Retrieval.RequestOptions,
    ): core.HttpResponsePromise<SamsaraApi.MediaRetrievalGetMediaRetrievalResponseBody> {
        return core.HttpResponsePromise.fromPromise(this.__get(request, requestOptions));
    }

    private async __get(
        request: SamsaraApi.cameras.media.RetrievalGetRequest,
        requestOptions?: Retrieval.RequestOptions,
    ): Promise<core.WithRawResponse<SamsaraApi.MediaRetrievalGetMediaRetrievalResponseBody>> {
        const { retrievalId } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["retrievalId"] = retrievalId;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SamsaraApiEnvironment.ProductionApi,
                "cameras/media/retrieval",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Samsara-Version": requestOptions?.version,
                }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as SamsaraApi.MediaRetrievalGetMediaRetrievalResponseBody,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new SamsaraApi.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new SamsaraApi.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 405:
                    throw new SamsaraApi.MethodNotAllowedError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new SamsaraApi.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new SamsaraApi.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 501:
                    throw new SamsaraApi.NotImplementedError(_response.error.body as unknown, _response.rawResponse);
                case 502:
                    throw new SamsaraApi.BadGatewayError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new SamsaraApi.ServiceUnavailableError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                case 504:
                    throw new SamsaraApi.GatewayTimeoutError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.SamsaraApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SamsaraApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SamsaraApiTimeoutError("Timeout exceeded when calling GET /cameras/media/retrieval.");
            case "unknown":
                throw new errors.SamsaraApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * This endpoint creates an asynchronous request to upload certain media from a device. The closest available media to the requested timestamp is returned. Images and high-res videos are supported; other types of media (e.g. hyperlapse, low-res) are planned to be supported in the future. Currently, only unblurred media is supported. If a device is offline, the requested media will be uploaded once it comes back online. Quota limits are enforced for media retrievals made through the API. The Create a media retrieval request response includes information about the media retrieval quota remaining for the organization. The media retrieval quota for the organization is reset at the beginning of each month.The quota is expressed using seconds of High Resolution video. 10 still images are equivalent to a 1 second of High Resolution footage.
     *
     *  <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).
     *
     * To use this endpoint, select **Write Media Retrieval** under the Safety & Cameras category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>
     *
     *
     *  **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.
     *
     * @param {SamsaraApi.cameras.media.MediaRetrievalPostMediaRetrievalRequestBody} request
     * @param {Retrieval.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SamsaraApi.UnauthorizedError}
     * @throws {@link SamsaraApi.NotFoundError}
     * @throws {@link SamsaraApi.MethodNotAllowedError}
     * @throws {@link SamsaraApi.TooManyRequestsError}
     * @throws {@link SamsaraApi.InternalServerError}
     * @throws {@link SamsaraApi.NotImplementedError}
     * @throws {@link SamsaraApi.BadGatewayError}
     * @throws {@link SamsaraApi.ServiceUnavailableError}
     * @throws {@link SamsaraApi.GatewayTimeoutError}
     *
     * @example
     *     await client.cameras.media.retrieval.create({
     *         endTime: "2019-06-13T19:08:55Z",
     *         inputs: ["dashcamRoadFacing", "dashcamRoadFacing"],
     *         mediaType: "image",
     *         startTime: "2019-06-13T19:08:25Z",
     *         vehicleId: "1234"
     *     })
     */
    public create(
        request: SamsaraApi.cameras.media.MediaRetrievalPostMediaRetrievalRequestBody,
        requestOptions?: Retrieval.RequestOptions,
    ): core.HttpResponsePromise<SamsaraApi.MediaRetrievalPostMediaRetrievalResponseBody> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: SamsaraApi.cameras.media.MediaRetrievalPostMediaRetrievalRequestBody,
        requestOptions?: Retrieval.RequestOptions,
    ): Promise<core.WithRawResponse<SamsaraApi.MediaRetrievalPostMediaRetrievalResponseBody>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SamsaraApiEnvironment.ProductionApi,
                "cameras/media/retrieval",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Samsara-Version": requestOptions?.version,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as SamsaraApi.MediaRetrievalPostMediaRetrievalResponseBody,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new SamsaraApi.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new SamsaraApi.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 405:
                    throw new SamsaraApi.MethodNotAllowedError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new SamsaraApi.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new SamsaraApi.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 501:
                    throw new SamsaraApi.NotImplementedError(_response.error.body as unknown, _response.rawResponse);
                case 502:
                    throw new SamsaraApi.BadGatewayError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new SamsaraApi.ServiceUnavailableError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                case 504:
                    throw new SamsaraApi.GatewayTimeoutError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.SamsaraApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SamsaraApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SamsaraApiTimeoutError("Timeout exceeded when calling POST /cameras/media/retrieval.");
            case "unknown":
                throw new errors.SamsaraApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["SAMSARA_API_KEY"];
        if (bearer == null) {
            throw new errors.SamsaraApiError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a SAMSARA_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
