/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as SamsaraApi from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index.js";

export declare namespace TrainingAssignments {
    export interface Options {
        environment?: core.Supplier<environments.SamsaraApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-Samsara-Version header */
        version?: "2025-05-12";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        /** Override the X-Samsara-Version header */
        version?: "2025-05-12";
    }
}

export class TrainingAssignments {
    protected readonly _options: TrainingAssignments.Options;

    constructor(_options: TrainingAssignments.Options = {}) {
        this._options = _options;
    }

    /**
     * Create training assignments. Existing assignments will remain unchanged.
     *
     * **Beta:** This endpoint is in beta and is likely to change before being broadly available. Reach out to your Samsara Representative to have Training APIs enabled for your organization.
     *
     *  <b>Rate limit:</b> 10 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).
     *
     * To use this endpoint, select **Write Training Assignments** under the Training Assignments category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>
     *
     *
     *  **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.
     *
     * @param {SamsaraApi.TrainingAssignmentsCreateRequest} request
     * @param {TrainingAssignments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SamsaraApi.UnauthorizedError}
     * @throws {@link SamsaraApi.NotFoundError}
     * @throws {@link SamsaraApi.MethodNotAllowedError}
     * @throws {@link SamsaraApi.TooManyRequestsError}
     * @throws {@link SamsaraApi.InternalServerError}
     * @throws {@link SamsaraApi.NotImplementedError}
     * @throws {@link SamsaraApi.BadGatewayError}
     * @throws {@link SamsaraApi.ServiceUnavailableError}
     * @throws {@link SamsaraApi.GatewayTimeoutError}
     *
     * @example
     *     await client.trainingAssignments.create({
     *         courseId: "courseId",
     *         dueAtTime: "dueAtTime"
     *     })
     */
    public create(
        request: SamsaraApi.TrainingAssignmentsCreateRequest,
        requestOptions?: TrainingAssignments.RequestOptions,
    ): core.HttpResponsePromise<SamsaraApi.TrainingAssignmentsPostTrainingAssignmentsResponseBody> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: SamsaraApi.TrainingAssignmentsCreateRequest,
        requestOptions?: TrainingAssignments.RequestOptions,
    ): Promise<core.WithRawResponse<SamsaraApi.TrainingAssignmentsPostTrainingAssignmentsResponseBody>> {
        const { courseId, dueAtTime, learnerIds } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["courseId"] = courseId;
        _queryParams["dueAtTime"] = dueAtTime;
        if (learnerIds != null) {
            if (Array.isArray(learnerIds)) {
                _queryParams["learnerIds"] = learnerIds.map((item) => item);
            } else {
                _queryParams["learnerIds"] = learnerIds;
            }
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SamsaraApiEnvironment.ProductionApi,
                "training-assignments",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Samsara-Version": requestOptions?.version,
                }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as SamsaraApi.TrainingAssignmentsPostTrainingAssignmentsResponseBody,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new SamsaraApi.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new SamsaraApi.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 405:
                    throw new SamsaraApi.MethodNotAllowedError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new SamsaraApi.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new SamsaraApi.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 501:
                    throw new SamsaraApi.NotImplementedError(_response.error.body as unknown, _response.rawResponse);
                case 502:
                    throw new SamsaraApi.BadGatewayError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new SamsaraApi.ServiceUnavailableError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                case 504:
                    throw new SamsaraApi.GatewayTimeoutError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.SamsaraApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SamsaraApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SamsaraApiTimeoutError("Timeout exceeded when calling POST /training-assignments.");
            case "unknown":
                throw new errors.SamsaraApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * This endpoint supports batch deletion operations. The response does not indicate which specific deletions, if any, have failed. On a successful deletion or partial failure, a ‘204 No Content’ status is returned.
     *
     * **Beta:** This endpoint is in beta and is likely to change before being broadly available. Reach out to your Samsara Representative to have Training APIs enabled for your organization.
     *
     *  <b>Rate limit:</b> 10 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).
     *
     * To use this endpoint, select **Write Training Assignments** under the Training Assignments category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>
     *
     *
     *  **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.
     *
     * @param {SamsaraApi.TrainingAssignmentsDeleteRequest} request
     * @param {TrainingAssignments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SamsaraApi.UnauthorizedError}
     * @throws {@link SamsaraApi.NotFoundError}
     * @throws {@link SamsaraApi.MethodNotAllowedError}
     * @throws {@link SamsaraApi.TooManyRequestsError}
     * @throws {@link SamsaraApi.InternalServerError}
     * @throws {@link SamsaraApi.NotImplementedError}
     * @throws {@link SamsaraApi.BadGatewayError}
     * @throws {@link SamsaraApi.ServiceUnavailableError}
     * @throws {@link SamsaraApi.GatewayTimeoutError}
     *
     * @example
     *     await client.trainingAssignments.delete()
     */
    public delete(
        request: SamsaraApi.TrainingAssignmentsDeleteRequest = {},
        requestOptions?: TrainingAssignments.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__delete(request, requestOptions));
    }

    private async __delete(
        request: SamsaraApi.TrainingAssignmentsDeleteRequest = {},
        requestOptions?: TrainingAssignments.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const { ids } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (ids != null) {
            if (Array.isArray(ids)) {
                _queryParams["ids"] = ids.map((item) => item);
            } else {
                _queryParams["ids"] = ids;
            }
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SamsaraApiEnvironment.ProductionApi,
                "training-assignments",
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Samsara-Version": requestOptions?.version,
                }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new SamsaraApi.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new SamsaraApi.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 405:
                    throw new SamsaraApi.MethodNotAllowedError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new SamsaraApi.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new SamsaraApi.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 501:
                    throw new SamsaraApi.NotImplementedError(_response.error.body as unknown, _response.rawResponse);
                case 502:
                    throw new SamsaraApi.BadGatewayError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new SamsaraApi.ServiceUnavailableError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                case 504:
                    throw new SamsaraApi.GatewayTimeoutError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.SamsaraApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SamsaraApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SamsaraApiTimeoutError("Timeout exceeded when calling DELETE /training-assignments.");
            case "unknown":
                throw new errors.SamsaraApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update training assignments.
     *
     * **Beta:** This endpoint is in beta and is likely to change before being broadly available. Reach out to your Samsara Representative to have Training APIs enabled for your organization.
     *
     *  <b>Rate limit:</b> 10 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).
     *
     * To use this endpoint, select **Write Training Assignments** under the Training Assignments category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>
     *
     *
     *  **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.
     *
     * @param {SamsaraApi.TrainingAssignmentsUpdateRequest} request
     * @param {TrainingAssignments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SamsaraApi.UnauthorizedError}
     * @throws {@link SamsaraApi.NotFoundError}
     * @throws {@link SamsaraApi.MethodNotAllowedError}
     * @throws {@link SamsaraApi.TooManyRequestsError}
     * @throws {@link SamsaraApi.InternalServerError}
     * @throws {@link SamsaraApi.NotImplementedError}
     * @throws {@link SamsaraApi.BadGatewayError}
     * @throws {@link SamsaraApi.ServiceUnavailableError}
     * @throws {@link SamsaraApi.GatewayTimeoutError}
     *
     * @example
     *     await client.trainingAssignments.update({
     *         dueAtTime: "dueAtTime"
     *     })
     */
    public update(
        request: SamsaraApi.TrainingAssignmentsUpdateRequest,
        requestOptions?: TrainingAssignments.RequestOptions,
    ): core.HttpResponsePromise<SamsaraApi.TrainingAssignmentsPatchTrainingAssignmentsResponseBody> {
        return core.HttpResponsePromise.fromPromise(this.__update(request, requestOptions));
    }

    private async __update(
        request: SamsaraApi.TrainingAssignmentsUpdateRequest,
        requestOptions?: TrainingAssignments.RequestOptions,
    ): Promise<core.WithRawResponse<SamsaraApi.TrainingAssignmentsPatchTrainingAssignmentsResponseBody>> {
        const { ids, dueAtTime } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (ids != null) {
            if (Array.isArray(ids)) {
                _queryParams["ids"] = ids.map((item) => item);
            } else {
                _queryParams["ids"] = ids;
            }
        }

        _queryParams["dueAtTime"] = dueAtTime;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SamsaraApiEnvironment.ProductionApi,
                "training-assignments",
            ),
            method: "PATCH",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Samsara-Version": requestOptions?.version,
                }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as SamsaraApi.TrainingAssignmentsPatchTrainingAssignmentsResponseBody,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new SamsaraApi.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new SamsaraApi.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 405:
                    throw new SamsaraApi.MethodNotAllowedError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new SamsaraApi.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new SamsaraApi.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 501:
                    throw new SamsaraApi.NotImplementedError(_response.error.body as unknown, _response.rawResponse);
                case 502:
                    throw new SamsaraApi.BadGatewayError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new SamsaraApi.ServiceUnavailableError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                case 504:
                    throw new SamsaraApi.GatewayTimeoutError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.SamsaraApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SamsaraApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SamsaraApiTimeoutError("Timeout exceeded when calling PATCH /training-assignments.");
            case "unknown":
                throw new errors.SamsaraApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns all training assignments data that has been created or modified for your organization based on the time parameters passed in. Results are paginated and are sorted by last modified date. If you include an endTime, the endpoint will return data up until that point (exclusive). If you don't include an endTime, you can continue to poll the API real-time with the pagination cursor that gets returned on every call.
     *
     * **Beta:** This endpoint is in beta and is likely to change before being broadly available. Reach out to your Samsara Representative to have Training APIs enabled for your organization.
     *
     *  <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).
     *
     * To use this endpoint, select **Read Training Assignments** under the Training Assignments category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>
     *
     *
     *  **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.
     *
     * @param {SamsaraApi.TrainingAssignmentsStreamRequest} request
     * @param {TrainingAssignments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SamsaraApi.UnauthorizedError}
     * @throws {@link SamsaraApi.NotFoundError}
     * @throws {@link SamsaraApi.MethodNotAllowedError}
     * @throws {@link SamsaraApi.TooManyRequestsError}
     * @throws {@link SamsaraApi.InternalServerError}
     * @throws {@link SamsaraApi.NotImplementedError}
     * @throws {@link SamsaraApi.BadGatewayError}
     * @throws {@link SamsaraApi.ServiceUnavailableError}
     * @throws {@link SamsaraApi.GatewayTimeoutError}
     *
     * @example
     *     await client.trainingAssignments.stream({
     *         startTime: "startTime"
     *     })
     */
    public stream(
        request: SamsaraApi.TrainingAssignmentsStreamRequest,
        requestOptions?: TrainingAssignments.RequestOptions,
    ): core.HttpResponsePromise<SamsaraApi.TrainingAssignmentsGetTrainingAssignmentsStreamResponseBody> {
        return core.HttpResponsePromise.fromPromise(this.__stream(request, requestOptions));
    }

    private async __stream(
        request: SamsaraApi.TrainingAssignmentsStreamRequest,
        requestOptions?: TrainingAssignments.RequestOptions,
    ): Promise<core.WithRawResponse<SamsaraApi.TrainingAssignmentsGetTrainingAssignmentsStreamResponseBody>> {
        const { after, startTime, endTime, learnerIds, courseIds, status } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (after != null) {
            _queryParams["after"] = after;
        }

        _queryParams["startTime"] = startTime;
        if (endTime != null) {
            _queryParams["endTime"] = endTime;
        }

        if (learnerIds != null) {
            if (Array.isArray(learnerIds)) {
                _queryParams["learnerIds"] = learnerIds.map((item) => item);
            } else {
                _queryParams["learnerIds"] = learnerIds;
            }
        }

        if (courseIds != null) {
            if (Array.isArray(courseIds)) {
                _queryParams["courseIds"] = courseIds.map((item) => item);
            } else {
                _queryParams["courseIds"] = courseIds;
            }
        }

        if (status != null) {
            if (Array.isArray(status)) {
                _queryParams["status"] = status.map((item) => item);
            } else {
                _queryParams["status"] = status;
            }
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SamsaraApiEnvironment.ProductionApi,
                "training-assignments/stream",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Samsara-Version": requestOptions?.version,
                }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as SamsaraApi.TrainingAssignmentsGetTrainingAssignmentsStreamResponseBody,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new SamsaraApi.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new SamsaraApi.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 405:
                    throw new SamsaraApi.MethodNotAllowedError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new SamsaraApi.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new SamsaraApi.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 501:
                    throw new SamsaraApi.NotImplementedError(_response.error.body as unknown, _response.rawResponse);
                case 502:
                    throw new SamsaraApi.BadGatewayError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new SamsaraApi.ServiceUnavailableError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                case 504:
                    throw new SamsaraApi.GatewayTimeoutError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.SamsaraApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SamsaraApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SamsaraApiTimeoutError(
                    "Timeout exceeded when calling GET /training-assignments/stream.",
                );
            case "unknown":
                throw new errors.SamsaraApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["SAMSARA_API_KEY"];
        if (bearer == null) {
            throw new errors.SamsaraApiError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a SAMSARA_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
