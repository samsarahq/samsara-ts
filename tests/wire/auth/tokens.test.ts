/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { SamsaraApiClient } from "../../../src/Client";

describe("Tokens", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraApiClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });
        const rawRequestBody = { grant_type: "authorization_code" };
        const rawResponseBody = {
            access_token: "access_token",
            token_type: "token_type",
            expires_in: 1,
            refresh_token: "refresh_token",
            scope: "scope",
        };
        server
            .mockEndpoint()
            .post("/oauth2/token")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.auth.tokens.create({});
        expect(response).toEqual({
            access_token: "access_token",
            token_type: "token_type",
            expires_in: 1,
            refresh_token: "refresh_token",
            scope: "scope",
        });
    });

    test("revoke", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraApiClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });
        const rawRequestBody = { token: "token" };
        const rawResponseBody = {
            access_token: "access_token",
            token_type: "token_type",
            expires_in: 1,
            refresh_token: "refresh_token",
            scope: "scope",
        };
        server
            .mockEndpoint()
            .post("/oauth2/revoke")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.auth.tokens.revoke({
            token: "token",
        });
        expect(response).toEqual({
            access_token: "access_token",
            token_type: "token_type",
            expires_in: 1,
            refresh_token: "refresh_token",
            scope: "scope",
        });
    });
});
