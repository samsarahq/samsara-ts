/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as SamsaraApi from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index.js";

export declare namespace Idling {
    export interface Options {
        environment?: core.Supplier<environments.SamsaraApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-Samsara-Version header */
        version?: "2025-05-12";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        /** Override the X-Samsara-Version header */
        version?: "2025-05-12";
    }
}

export class Idling {
    protected readonly _options: Idling.Options;

    constructor(_options: Idling.Options = {}) {
        this._options = _options;
    }

    /**
     * Get idling events for the requested time duration.
     *
     * **Note:** The data from this endpoint comes from the new Advanced Idling Report, which provides additional data fields for each idling event such as air temperature, geofence, PTO state and minimum idle time. This endpoint will initially include data from August 1, 2024. Approx. two weeks later, this will be further back dated to January 1, 2024. If you require additional historical data, you can access it via the [vehicle idling reports API](https://developers.samsara.com/reference/getvehicleidlingreports).
     *
     *  <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).
     *
     * To use this endpoint, select **Read Idling** under the Fuel & Energy category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>
     *
     *
     *  **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.
     *
     * @param {SamsaraApi.IdlingListRequest} request
     * @param {Idling.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SamsaraApi.UnauthorizedError}
     * @throws {@link SamsaraApi.NotFoundError}
     * @throws {@link SamsaraApi.MethodNotAllowedError}
     * @throws {@link SamsaraApi.TooManyRequestsError}
     * @throws {@link SamsaraApi.InternalServerError}
     * @throws {@link SamsaraApi.NotImplementedError}
     * @throws {@link SamsaraApi.BadGatewayError}
     * @throws {@link SamsaraApi.ServiceUnavailableError}
     * @throws {@link SamsaraApi.GatewayTimeoutError}
     *
     * @example
     *     await client.idling.list({
     *         startTime: "startTime",
     *         endTime: "endTime"
     *     })
     */
    public async list(
        request: SamsaraApi.IdlingListRequest,
        requestOptions?: Idling.RequestOptions,
    ): Promise<core.Page<SamsaraApi.IdlingEventObjectResponseBody>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: SamsaraApi.IdlingListRequest,
            ): Promise<core.WithRawResponse<SamsaraApi.AdvancedIdlingGetIdlingEventsResponseBody>> => {
                const {
                    startTime,
                    endTime,
                    assetIds,
                    operatorIds,
                    ptoState,
                    minAirTemperatureMillicelsius,
                    maxAirTemperatureMillicelsius,
                    excludeEventsWithUnknownAirTemperature,
                    minDurationMilliseconds,
                    maxDurationMilliseconds,
                    tagIds,
                    parentTagIds,
                    after,
                    limit,
                } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                _queryParams["startTime"] = startTime;
                _queryParams["endTime"] = endTime;
                if (assetIds != null) {
                    if (Array.isArray(assetIds)) {
                        _queryParams["assetIds"] = assetIds.map((item) => item);
                    } else {
                        _queryParams["assetIds"] = assetIds;
                    }
                }
                if (operatorIds != null) {
                    if (Array.isArray(operatorIds)) {
                        _queryParams["operatorIds"] = operatorIds.map((item) => item);
                    } else {
                        _queryParams["operatorIds"] = operatorIds;
                    }
                }
                if (ptoState != null) {
                    _queryParams["ptoState"] = ptoState;
                }
                if (minAirTemperatureMillicelsius != null) {
                    _queryParams["minAirTemperatureMillicelsius"] = minAirTemperatureMillicelsius.toString();
                }
                if (maxAirTemperatureMillicelsius != null) {
                    _queryParams["maxAirTemperatureMillicelsius"] = maxAirTemperatureMillicelsius.toString();
                }
                if (excludeEventsWithUnknownAirTemperature != null) {
                    _queryParams["excludeEventsWithUnknownAirTemperature"] =
                        excludeEventsWithUnknownAirTemperature.toString();
                }
                if (minDurationMilliseconds != null) {
                    _queryParams["minDurationMilliseconds"] = minDurationMilliseconds.toString();
                }
                if (maxDurationMilliseconds != null) {
                    _queryParams["maxDurationMilliseconds"] = maxDurationMilliseconds.toString();
                }
                if (tagIds != null) {
                    if (Array.isArray(tagIds)) {
                        _queryParams["tagIds"] = tagIds.map((item) => item);
                    } else {
                        _queryParams["tagIds"] = tagIds;
                    }
                }
                if (parentTagIds != null) {
                    if (Array.isArray(parentTagIds)) {
                        _queryParams["parentTagIds"] = parentTagIds.map((item) => item);
                    } else {
                        _queryParams["parentTagIds"] = parentTagIds;
                    }
                }
                if (after != null) {
                    _queryParams["after"] = after;
                }
                if (limit != null) {
                    _queryParams["limit"] = limit.toString();
                }
                const _response = await core.fetcher({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.SamsaraApiEnvironment.ProductionApi,
                        "idling/events",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({
                            Authorization: await this._getAuthorizationHeader(),
                            "X-Samsara-Version": requestOptions?.version,
                        }),
                        requestOptions?.headers,
                    ),
                    queryParameters: _queryParams,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as SamsaraApi.AdvancedIdlingGetIdlingEventsResponseBody,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 401:
                            throw new SamsaraApi.UnauthorizedError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 404:
                            throw new SamsaraApi.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                        case 405:
                            throw new SamsaraApi.MethodNotAllowedError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 429:
                            throw new SamsaraApi.TooManyRequestsError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 500:
                            throw new SamsaraApi.InternalServerError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 501:
                            throw new SamsaraApi.NotImplementedError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 502:
                            throw new SamsaraApi.BadGatewayError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 503:
                            throw new SamsaraApi.ServiceUnavailableError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 504:
                            throw new SamsaraApi.GatewayTimeoutError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        default:
                            throw new errors.SamsaraApiError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SamsaraApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SamsaraApiTimeoutError("Timeout exceeded when calling GET /idling/events.");
                    case "unknown":
                        throw new errors.SamsaraApiError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<
            SamsaraApi.AdvancedIdlingGetIdlingEventsResponseBody,
            SamsaraApi.IdlingEventObjectResponseBody
        >({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) => response?.pagination?.endCursor != null,
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "after", response?.pagination?.endCursor));
            },
        });
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["SAMSARA_API_KEY"];
        if (bearer == null) {
            throw new errors.SamsaraApiError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a SAMSARA_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
