/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * A single route stop for a route.
 */
export interface MinimalRouteStopResponseBody {
    /** Actual arrival time, if it exists, for the route stop in RFC 3339 format. */
    actualArrivalTime?: string;
    /** Actual departure time, if it exists, for the route stop in RFC 3339 format. */
    actualDepartureTime?: string;
    /** The time the stop became en-route, in RFC 3339 format. */
    enRouteTime?: string;
    /** Estimated time of arrival, if this stop is currently en-route, in RFC 3339 format. */
    eta?: string;
    /** A map of external ids */
    externalIds?: Record<string, string>;
    /** Unique identifier for the route stop. */
    id: string;
    /** The shareable url of the stop's current status. */
    liveSharingUrl?: string;
    /** Skipped time, if it exists, for the route stop in RFC 3339 format. */
    skippedTime?: string;
    /** The current state of the route stop.  Valid values: `unassigned`, `scheduled`, `en route`, `skipped`, `arrived`, `departed` */
    state: MinimalRouteStopResponseBody.State;
}

export namespace MinimalRouteStopResponseBody {
    /**
     * The current state of the route stop.  Valid values: `unassigned`, `scheduled`, `en route`, `skipped`, `arrived`, `departed`
     */
    export type State = "unassigned" | "scheduled" | "en route" | "skipped" | "arrived" | "departed";
    export const State = {
        Unassigned: "unassigned",
        Scheduled: "scheduled",
        EnRoute: "en route",
        Skipped: "skipped",
        Arrived: "arrived",
        Departed: "departed",
    } as const;
}
