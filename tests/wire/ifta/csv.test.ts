/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { SamsaraClient } from "../../../src/Client";

describe("Csv", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });
        const rawRequestBody = { endHour: "2019-06-13T19:00:00Z", startHour: "2019-06-13T19:00:00Z" };
        const rawResponseBody = {
            data: {
                args: {
                    endHour: "2019-06-13T19:00:00Z",
                    startHour: "2019-06-13T19:00:00Z",
                    vehicleIds: [12345678, 56789123],
                },
                completedAtTime: "2019-06-13T19:00:00Z",
                details: "Try limiting the number of vehicles requested per job to reduce the processing duration.",
                failedAtTime: "2019-06-13T19:00:00Z",
                files: [
                    {
                        createdAtTime: "2019-06-13T19:00:00Z",
                        downloadUrl: "https://s3.download-url.com",
                        downloadUrlExpirationTime: "2019-06-13T19:00:00Z",
                        name: "output-001.csv.gz",
                        recordCount: 1151008429451486100,
                    },
                ],
                jobId: "8cabba84-bef4-4951-8cd2-78ce898fd8e6",
                jobStatus: "Requested",
                requestedAtTime: "2019-06-13T19:00:00Z",
                startedAtTime: "2019-06-13T19:00:00Z",
            },
        };
        server
            .mockEndpoint()
            .post("/ifta-detail/csv")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.ifta.csv.create({
            endHour: "2019-06-13T19:00:00Z",
            startHour: "2019-06-13T19:00:00Z",
        });
        expect(response).toEqual({
            data: {
                args: {
                    endHour: "2019-06-13T19:00:00Z",
                    startHour: "2019-06-13T19:00:00Z",
                    vehicleIds: [12345678, 56789123],
                },
                completedAtTime: "2019-06-13T19:00:00Z",
                details: "Try limiting the number of vehicles requested per job to reduce the processing duration.",
                failedAtTime: "2019-06-13T19:00:00Z",
                files: [
                    {
                        createdAtTime: "2019-06-13T19:00:00Z",
                        downloadUrl: "https://s3.download-url.com",
                        downloadUrlExpirationTime: "2019-06-13T19:00:00Z",
                        name: "output-001.csv.gz",
                        recordCount: 1151008429451486100,
                    },
                ],
                jobId: "8cabba84-bef4-4951-8cd2-78ce898fd8e6",
                jobStatus: "Requested",
                requestedAtTime: "2019-06-13T19:00:00Z",
                startedAtTime: "2019-06-13T19:00:00Z",
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                args: {
                    endHour: "2019-06-13T19:00:00Z",
                    startHour: "2019-06-13T19:00:00Z",
                    vehicleIds: [12345678, 56789123],
                },
                completedAtTime: "2019-06-13T19:00:00Z",
                details: "Try limiting the number of vehicles requested per job to reduce the processing duration.",
                failedAtTime: "2019-06-13T19:00:00Z",
                files: [
                    {
                        createdAtTime: "2019-06-13T19:00:00Z",
                        downloadUrl: "https://s3.download-url.com",
                        downloadUrlExpirationTime: "2019-06-13T19:00:00Z",
                        name: "output-001.csv.gz",
                        recordCount: 1151008429451486100,
                    },
                ],
                jobId: "8cabba84-bef4-4951-8cd2-78ce898fd8e6",
                jobStatus: "Requested",
                requestedAtTime: "2019-06-13T19:00:00Z",
                startedAtTime: "2019-06-13T19:00:00Z",
            },
        };
        server
            .mockEndpoint()
            .get("/ifta-detail/csv/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.ifta.csv.get("id");
        expect(response).toEqual({
            data: {
                args: {
                    endHour: "2019-06-13T19:00:00Z",
                    startHour: "2019-06-13T19:00:00Z",
                    vehicleIds: [12345678, 56789123],
                },
                completedAtTime: "2019-06-13T19:00:00Z",
                details: "Try limiting the number of vehicles requested per job to reduce the processing duration.",
                failedAtTime: "2019-06-13T19:00:00Z",
                files: [
                    {
                        createdAtTime: "2019-06-13T19:00:00Z",
                        downloadUrl: "https://s3.download-url.com",
                        downloadUrlExpirationTime: "2019-06-13T19:00:00Z",
                        name: "output-001.csv.gz",
                        recordCount: 1151008429451486100,
                    },
                ],
                jobId: "8cabba84-bef4-4951-8cd2-78ce898fd8e6",
                jobStatus: "Requested",
                requestedAtTime: "2019-06-13T19:00:00Z",
                startedAtTime: "2019-06-13T19:00:00Z",
            },
        });
    });
});
