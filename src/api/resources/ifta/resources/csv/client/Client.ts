/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments.js";
import * as core from "../../../../../../core/index.js";
import * as SamsaraApi from "../../../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import urlJoin from "url-join";
import * as errors from "../../../../../../errors/index.js";

export declare namespace Csv {
    export interface Options {
        environment?: core.Supplier<environments.SamsaraApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-Samsara-Version header */
        version?: "2025-05-12";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        /** Override the X-Samsara-Version header */
        version?: "2025-05-12";
    }
}

export class Csv {
    protected readonly _options: Csv.Options;

    constructor(_options: Csv.Options = {}) {
        this._options = _options;
    }

    /**
     * Create a job to generate csv files of IFTA mileage segments.
     *
     *  <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).
     *
     * To use this endpoint, select **Write IFTA (US)** under the Compliance category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>
     *
     *
     *  **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.
     *
     * @param {SamsaraApi.ifta.IftaCreateIftaDetailJobRequestBody} request
     * @param {Csv.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SamsaraApi.UnauthorizedError}
     * @throws {@link SamsaraApi.NotFoundError}
     * @throws {@link SamsaraApi.MethodNotAllowedError}
     * @throws {@link SamsaraApi.TooManyRequestsError}
     * @throws {@link SamsaraApi.InternalServerError}
     * @throws {@link SamsaraApi.NotImplementedError}
     * @throws {@link SamsaraApi.BadGatewayError}
     * @throws {@link SamsaraApi.ServiceUnavailableError}
     * @throws {@link SamsaraApi.GatewayTimeoutError}
     *
     * @example
     *     await client.ifta.csv.create({
     *         endHour: "2019-06-13T19:00:00Z",
     *         startHour: "2019-06-13T19:00:00Z"
     *     })
     */
    public create(
        request: SamsaraApi.ifta.IftaCreateIftaDetailJobRequestBody,
        requestOptions?: Csv.RequestOptions,
    ): core.HttpResponsePromise<SamsaraApi.IftaCreateIftaDetailJobResponseBody> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: SamsaraApi.ifta.IftaCreateIftaDetailJobRequestBody,
        requestOptions?: Csv.RequestOptions,
    ): Promise<core.WithRawResponse<SamsaraApi.IftaCreateIftaDetailJobResponseBody>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SamsaraApiEnvironment.ProductionApi,
                "ifta-detail/csv",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Samsara-Version": requestOptions?.version,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as SamsaraApi.IftaCreateIftaDetailJobResponseBody,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new SamsaraApi.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new SamsaraApi.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 405:
                    throw new SamsaraApi.MethodNotAllowedError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new SamsaraApi.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new SamsaraApi.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 501:
                    throw new SamsaraApi.NotImplementedError(_response.error.body as unknown, _response.rawResponse);
                case 502:
                    throw new SamsaraApi.BadGatewayError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new SamsaraApi.ServiceUnavailableError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                case 504:
                    throw new SamsaraApi.GatewayTimeoutError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.SamsaraApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SamsaraApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SamsaraApiTimeoutError("Timeout exceeded when calling POST /ifta-detail/csv.");
            case "unknown":
                throw new errors.SamsaraApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get information about an existing IFTA detail job.
     *
     *  <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).
     *
     * To use this endpoint, select **Read IFTA (US)** under the Compliance category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>
     *
     *
     *  **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.
     *
     * @param {string} id - ID of the requested job.
     * @param {Csv.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SamsaraApi.UnauthorizedError}
     * @throws {@link SamsaraApi.NotFoundError}
     * @throws {@link SamsaraApi.MethodNotAllowedError}
     * @throws {@link SamsaraApi.TooManyRequestsError}
     * @throws {@link SamsaraApi.InternalServerError}
     * @throws {@link SamsaraApi.NotImplementedError}
     * @throws {@link SamsaraApi.BadGatewayError}
     * @throws {@link SamsaraApi.ServiceUnavailableError}
     * @throws {@link SamsaraApi.GatewayTimeoutError}
     *
     * @example
     *     await client.ifta.csv.get("id")
     */
    public get(
        id: string,
        requestOptions?: Csv.RequestOptions,
    ): core.HttpResponsePromise<SamsaraApi.IftaGetIftaDetailJobResponseBody> {
        return core.HttpResponsePromise.fromPromise(this.__get(id, requestOptions));
    }

    private async __get(
        id: string,
        requestOptions?: Csv.RequestOptions,
    ): Promise<core.WithRawResponse<SamsaraApi.IftaGetIftaDetailJobResponseBody>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SamsaraApiEnvironment.ProductionApi,
                `ifta-detail/csv/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Samsara-Version": requestOptions?.version,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as SamsaraApi.IftaGetIftaDetailJobResponseBody,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new SamsaraApi.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new SamsaraApi.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 405:
                    throw new SamsaraApi.MethodNotAllowedError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new SamsaraApi.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new SamsaraApi.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 501:
                    throw new SamsaraApi.NotImplementedError(_response.error.body as unknown, _response.rawResponse);
                case 502:
                    throw new SamsaraApi.BadGatewayError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new SamsaraApi.ServiceUnavailableError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                case 504:
                    throw new SamsaraApi.GatewayTimeoutError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.SamsaraApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SamsaraApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SamsaraApiTimeoutError("Timeout exceeded when calling GET /ifta-detail/csv/{id}.");
            case "unknown":
                throw new errors.SamsaraApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["SAMSARA_API_KEY"];
        if (bearer == null) {
            throw new errors.SamsaraApiError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a SAMSARA_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
