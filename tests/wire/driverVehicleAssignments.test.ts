/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { SamsaraClient } from "../../src/Client";

describe("DriverVehicleAssignments", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    assignedAtTime: "2019-06-13T19:08:25Z",
                    assignmentType: "invalid",
                    driver: { id: "45646", name: "Driver Bob" },
                    endTime: "2019-06-13T19:08:25Z",
                    isPassenger: false,
                    metadata: { sourceName: "ExternalSourceName" },
                    startTime: "2019-06-13T19:08:25Z",
                    vehicle: { id: "494123", name: "Fleet Truck #1" },
                },
            ],
            pagination: { endCursor: "MjkY", hasNextPage: true },
        };
        server
            .mockEndpoint()
            .get("/fleet/driver-vehicle-assignments")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.driverVehicleAssignments.get({
            filterBy: "drivers",
        });
        expect(response).toEqual({
            data: [
                {
                    assignedAtTime: "2019-06-13T19:08:25Z",
                    assignmentType: "invalid",
                    driver: {
                        id: "45646",
                        name: "Driver Bob",
                    },
                    endTime: "2019-06-13T19:08:25Z",
                    isPassenger: false,
                    metadata: {
                        sourceName: "ExternalSourceName",
                    },
                    startTime: "2019-06-13T19:08:25Z",
                    vehicle: {
                        id: "494123",
                        name: "Fleet Truck #1",
                    },
                },
            ],
            pagination: {
                endCursor: "MjkY",
                hasNextPage: true,
            },
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });
        const rawRequestBody = { driverId: "494123", vehicleId: "281474978683353" };
        const rawResponseBody = { data: { message: "Driver assignment was successfully submitted" } };
        server
            .mockEndpoint()
            .post("/fleet/driver-vehicle-assignments")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.driverVehicleAssignments.create({
            driverId: "494123",
            vehicleId: "281474978683353",
        });
        expect(response).toEqual({
            data: {
                message: "Driver assignment was successfully submitted",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });
        const rawRequestBody = { vehicleId: "281474978683353" };

        server
            .mockEndpoint()
            .delete("/fleet/driver-vehicle-assignments")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.driverVehicleAssignments.delete({
            vehicleId: "281474978683353",
        });
        expect(response).toEqual(undefined);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });
        const rawRequestBody = { driverId: "494123", startTime: "2019-06-13T19:08:25Z", vehicleId: "281474978683353" };
        const rawResponseBody = { data: { message: "Driver assignment was successfully updated" } };
        server
            .mockEndpoint()
            .patch("/fleet/driver-vehicle-assignments")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.driverVehicleAssignments.update({
            driverId: "494123",
            startTime: "2019-06-13T19:08:25Z",
            vehicleId: "281474978683353",
        });
        expect(response).toEqual({
            data: {
                message: "Driver assignment was successfully updated",
            },
        });
    });
});
