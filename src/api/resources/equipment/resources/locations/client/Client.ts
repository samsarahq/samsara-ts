/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments.js";
import * as core from "../../../../../../core/index.js";
import * as SamsaraApi from "../../../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import urlJoin from "url-join";
import * as errors from "../../../../../../errors/index.js";

export declare namespace Locations {
    export interface Options {
        environment?: core.Supplier<environments.SamsaraApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-Samsara-Version header */
        version?: "2025-05-12";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        /** Override the X-Samsara-Version header */
        version?: "2025-05-12";
    }
}

export class Locations {
    protected readonly _options: Locations.Options;

    constructor(_options: Locations.Options = {}) {
        this._options = _options;
    }

    /**
     * Returns last known locations for all equipment. This can be optionally filtered by tags or specific equipment IDs.
     *
     *  **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.
     *
     * To use this endpoint, select **Read Equipment Statistics** under the Equipment category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>
     *
     * @param {SamsaraApi.equipment.LocationsListRequest} request
     * @param {Locations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.equipment.locations.list()
     */
    public async list(
        request: SamsaraApi.equipment.LocationsListRequest = {},
        requestOptions?: Locations.RequestOptions,
    ): Promise<core.Page<SamsaraApi.EquipmentLocationsResponseData>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: SamsaraApi.equipment.LocationsListRequest,
            ): Promise<core.WithRawResponse<SamsaraApi.EquipmentLocationsResponse>> => {
                const { after, parentTagIds, tagIds, equipmentIds } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (after != null) {
                    _queryParams["after"] = after;
                }
                if (parentTagIds != null) {
                    if (Array.isArray(parentTagIds)) {
                        _queryParams["parentTagIds"] = parentTagIds.map((item) => item);
                    } else {
                        _queryParams["parentTagIds"] = parentTagIds;
                    }
                }
                if (tagIds != null) {
                    if (Array.isArray(tagIds)) {
                        _queryParams["tagIds"] = tagIds.map((item) => item);
                    } else {
                        _queryParams["tagIds"] = tagIds;
                    }
                }
                if (equipmentIds != null) {
                    if (Array.isArray(equipmentIds)) {
                        _queryParams["equipmentIds"] = equipmentIds.map((item) => item);
                    } else {
                        _queryParams["equipmentIds"] = equipmentIds;
                    }
                }
                const _response = await core.fetcher({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.SamsaraApiEnvironment.ProductionApi,
                        "fleet/equipment/locations",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({
                            Authorization: await this._getAuthorizationHeader(),
                            "X-Samsara-Version": requestOptions?.version,
                        }),
                        requestOptions?.headers,
                    ),
                    queryParameters: _queryParams,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as SamsaraApi.EquipmentLocationsResponse,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SamsaraApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SamsaraApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SamsaraApiTimeoutError(
                            "Timeout exceeded when calling GET /fleet/equipment/locations.",
                        );
                    case "unknown":
                        throw new errors.SamsaraApiError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<SamsaraApi.EquipmentLocationsResponse, SamsaraApi.EquipmentLocationsResponseData>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) => response?.pagination?.endCursor != null,
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "after", response?.pagination?.endCursor));
            },
        });
    }

    /**
     * Follow a continuous feed of all equipment locations.
     *
     * Your first call to this endpoint will provide you with the most recent location for each unit of equipment and a `pagination` object that contains an `endCursor`.
     *
     * You can provide the `endCursor` to subsequent calls via the `after` parameter. The response will contain any equipment location updates since that `endCursor`.
     *
     * If `hasNextPage` is `false`, no updates are readily available yet. We'd suggest waiting a minimum of 5 seconds before requesting updates.
     *
     *  **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.
     *
     * To use this endpoint, select **Read Equipment Statistics** under the Equipment category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>
     *
     * @param {SamsaraApi.equipment.LocationsFeedRequest} request
     * @param {Locations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.equipment.locations.feed()
     */
    public async feed(
        request: SamsaraApi.equipment.LocationsFeedRequest = {},
        requestOptions?: Locations.RequestOptions,
    ): Promise<core.Page<SamsaraApi.EquipmentLocationsListResponseData>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: SamsaraApi.equipment.LocationsFeedRequest,
            ): Promise<core.WithRawResponse<SamsaraApi.EquipmentLocationsListResponse>> => {
                const { after, parentTagIds, tagIds, equipmentIds } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (after != null) {
                    _queryParams["after"] = after;
                }
                if (parentTagIds != null) {
                    if (Array.isArray(parentTagIds)) {
                        _queryParams["parentTagIds"] = parentTagIds.map((item) => item);
                    } else {
                        _queryParams["parentTagIds"] = parentTagIds;
                    }
                }
                if (tagIds != null) {
                    if (Array.isArray(tagIds)) {
                        _queryParams["tagIds"] = tagIds.map((item) => item);
                    } else {
                        _queryParams["tagIds"] = tagIds;
                    }
                }
                if (equipmentIds != null) {
                    if (Array.isArray(equipmentIds)) {
                        _queryParams["equipmentIds"] = equipmentIds.map((item) => item);
                    } else {
                        _queryParams["equipmentIds"] = equipmentIds;
                    }
                }
                const _response = await core.fetcher({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.SamsaraApiEnvironment.ProductionApi,
                        "fleet/equipment/locations/feed",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({
                            Authorization: await this._getAuthorizationHeader(),
                            "X-Samsara-Version": requestOptions?.version,
                        }),
                        requestOptions?.headers,
                    ),
                    queryParameters: _queryParams,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as SamsaraApi.EquipmentLocationsListResponse,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SamsaraApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SamsaraApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SamsaraApiTimeoutError(
                            "Timeout exceeded when calling GET /fleet/equipment/locations/feed.",
                        );
                    case "unknown":
                        throw new errors.SamsaraApiError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<
            SamsaraApi.EquipmentLocationsListResponse,
            SamsaraApi.EquipmentLocationsListResponseData
        >({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) => response?.pagination?.endCursor != null,
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "after", response?.pagination?.endCursor));
            },
        });
    }

    /**
     * Returns historical equipment locations during the given time range. This can be optionally filtered by tags or specific equipment IDs.
     *
     *  **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.
     *
     * To use this endpoint, select **Read Equipment Statistics** under the Equipment category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>
     *
     * @param {SamsaraApi.equipment.LocationsHistoryRequest} request
     * @param {Locations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.equipment.locations.history({
     *         startTime: "startTime",
     *         endTime: "endTime"
     *     })
     */
    public async history(
        request: SamsaraApi.equipment.LocationsHistoryRequest,
        requestOptions?: Locations.RequestOptions,
    ): Promise<core.Page<SamsaraApi.EquipmentLocationsListResponseData>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: SamsaraApi.equipment.LocationsHistoryRequest,
            ): Promise<core.WithRawResponse<SamsaraApi.EquipmentLocationsListResponse>> => {
                const { after, startTime, endTime, parentTagIds, tagIds, equipmentIds } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (after != null) {
                    _queryParams["after"] = after;
                }
                _queryParams["startTime"] = startTime;
                _queryParams["endTime"] = endTime;
                if (parentTagIds != null) {
                    if (Array.isArray(parentTagIds)) {
                        _queryParams["parentTagIds"] = parentTagIds.map((item) => item);
                    } else {
                        _queryParams["parentTagIds"] = parentTagIds;
                    }
                }
                if (tagIds != null) {
                    if (Array.isArray(tagIds)) {
                        _queryParams["tagIds"] = tagIds.map((item) => item);
                    } else {
                        _queryParams["tagIds"] = tagIds;
                    }
                }
                if (equipmentIds != null) {
                    if (Array.isArray(equipmentIds)) {
                        _queryParams["equipmentIds"] = equipmentIds.map((item) => item);
                    } else {
                        _queryParams["equipmentIds"] = equipmentIds;
                    }
                }
                const _response = await core.fetcher({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.SamsaraApiEnvironment.ProductionApi,
                        "fleet/equipment/locations/history",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({
                            Authorization: await this._getAuthorizationHeader(),
                            "X-Samsara-Version": requestOptions?.version,
                        }),
                        requestOptions?.headers,
                    ),
                    queryParameters: _queryParams,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as SamsaraApi.EquipmentLocationsListResponse,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SamsaraApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SamsaraApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SamsaraApiTimeoutError(
                            "Timeout exceeded when calling GET /fleet/equipment/locations/history.",
                        );
                    case "unknown":
                        throw new errors.SamsaraApiError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<
            SamsaraApi.EquipmentLocationsListResponse,
            SamsaraApi.EquipmentLocationsListResponseData
        >({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) => response?.pagination?.endCursor != null,
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "after", response?.pagination?.endCursor));
            },
        });
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["SAMSARA_API_KEY"];
        if (bearer == null) {
            throw new errors.SamsaraApiError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a SAMSARA_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
