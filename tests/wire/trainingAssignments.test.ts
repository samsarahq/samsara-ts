/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { SamsaraApiClient } from "../../src/Client";

describe("TrainingAssignments", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraApiClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    course: { id: "id", revisionId: "revisionId" },
                    createdAtTime: "2024-01-15T09:30:00Z",
                    createdById: "createdById",
                    dueAtTime: "2024-01-15T09:30:00Z",
                    id: "id",
                    isExistingAssignment: true,
                    learner: { id: "id", type: "driver" },
                },
                {
                    course: { id: "id", revisionId: "revisionId" },
                    createdAtTime: "2024-01-15T09:30:00Z",
                    createdById: "createdById",
                    dueAtTime: "2024-01-15T09:30:00Z",
                    id: "id",
                    isExistingAssignment: true,
                    learner: { id: "id", type: "driver" },
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/training-assignments")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.trainingAssignments.create({
            courseId: "courseId",
            dueAtTime: "dueAtTime",
        });
        expect(response).toEqual({
            data: [
                {
                    course: {
                        id: "id",
                        revisionId: "revisionId",
                    },
                    createdAtTime: "2024-01-15T09:30:00Z",
                    createdById: "createdById",
                    dueAtTime: "2024-01-15T09:30:00Z",
                    id: "id",
                    isExistingAssignment: true,
                    learner: {
                        id: "id",
                        type: "driver",
                    },
                },
                {
                    course: {
                        id: "id",
                        revisionId: "revisionId",
                    },
                    createdAtTime: "2024-01-15T09:30:00Z",
                    createdById: "createdById",
                    dueAtTime: "2024-01-15T09:30:00Z",
                    id: "id",
                    isExistingAssignment: true,
                    learner: {
                        id: "id",
                        type: "driver",
                    },
                },
            ],
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraApiClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });

        server.mockEndpoint().delete("/training-assignments").respondWith().statusCode(200).build();

        const response = await client.trainingAssignments.delete();
        expect(response).toEqual(undefined);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraApiClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    completedAtTime: "2024-01-15T09:30:00Z",
                    course: { id: "id", revisionId: "revisionId" },
                    createdAtTime: "2024-01-15T09:30:00Z",
                    createdById: "createdById",
                    deletedAtTime: "2024-01-15T09:30:00Z",
                    dueAtTime: "2024-01-15T09:30:00Z",
                    durationMinutes: 1000000,
                    id: "id",
                    isCompletedLate: true,
                    isOverdue: true,
                    learner: { id: "id", type: "driver" },
                    scorePercent: 1.1,
                    startedAtTime: "2024-01-15T09:30:00Z",
                    status: "notStarted",
                    updatedAtTime: "2024-01-15T09:30:00Z",
                    updatedById: "updatedById",
                },
                {
                    completedAtTime: "2024-01-15T09:30:00Z",
                    course: { id: "id", revisionId: "revisionId" },
                    createdAtTime: "2024-01-15T09:30:00Z",
                    createdById: "createdById",
                    deletedAtTime: "2024-01-15T09:30:00Z",
                    dueAtTime: "2024-01-15T09:30:00Z",
                    durationMinutes: 1000000,
                    id: "id",
                    isCompletedLate: true,
                    isOverdue: true,
                    learner: { id: "id", type: "driver" },
                    scorePercent: 1.1,
                    startedAtTime: "2024-01-15T09:30:00Z",
                    status: "notStarted",
                    updatedAtTime: "2024-01-15T09:30:00Z",
                    updatedById: "updatedById",
                },
            ],
        };
        server
            .mockEndpoint()
            .patch("/training-assignments")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.trainingAssignments.update({
            dueAtTime: "dueAtTime",
        });
        expect(response).toEqual({
            data: [
                {
                    completedAtTime: "2024-01-15T09:30:00Z",
                    course: {
                        id: "id",
                        revisionId: "revisionId",
                    },
                    createdAtTime: "2024-01-15T09:30:00Z",
                    createdById: "createdById",
                    deletedAtTime: "2024-01-15T09:30:00Z",
                    dueAtTime: "2024-01-15T09:30:00Z",
                    durationMinutes: 1000000,
                    id: "id",
                    isCompletedLate: true,
                    isOverdue: true,
                    learner: {
                        id: "id",
                        type: "driver",
                    },
                    scorePercent: 1.1,
                    startedAtTime: "2024-01-15T09:30:00Z",
                    status: "notStarted",
                    updatedAtTime: "2024-01-15T09:30:00Z",
                    updatedById: "updatedById",
                },
                {
                    completedAtTime: "2024-01-15T09:30:00Z",
                    course: {
                        id: "id",
                        revisionId: "revisionId",
                    },
                    createdAtTime: "2024-01-15T09:30:00Z",
                    createdById: "createdById",
                    deletedAtTime: "2024-01-15T09:30:00Z",
                    dueAtTime: "2024-01-15T09:30:00Z",
                    durationMinutes: 1000000,
                    id: "id",
                    isCompletedLate: true,
                    isOverdue: true,
                    learner: {
                        id: "id",
                        type: "driver",
                    },
                    scorePercent: 1.1,
                    startedAtTime: "2024-01-15T09:30:00Z",
                    status: "notStarted",
                    updatedAtTime: "2024-01-15T09:30:00Z",
                    updatedById: "updatedById",
                },
            ],
        });
    });

    test("stream", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraApiClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    completedAtTime: "2019-06-13T19:08:25Z",
                    course: {
                        id: "9814a1fa-f0c6-408b-bf85-51dc3bc71ac7",
                        revisionId: "1214a1fa-f0c6-408b-bf85-51dc3bc71ac7",
                    },
                    createdAtTime: "2019-06-13T19:08:25Z",
                    createdById: "user-4392",
                    deletedAtTime: "2019-06-13T19:08:25Z",
                    dueAtTime: "2019-06-13T19:08:25Z",
                    durationMinutes: 5883292486284507000,
                    id: "9814a1fa-f0c6-408b-bf85-51dc3bc71ac7",
                    isCompletedLate: true,
                    isOverdue: true,
                    learner: { id: "938172", type: "driver" },
                    scorePercent: 0.20511986669994858,
                    startedAtTime: "2019-06-13T19:08:25Z",
                    status: "notStarted",
                    updatedAtTime: "2019-06-13T19:08:25Z",
                    updatedById: "user-3112",
                },
            ],
            pagination: { endCursor: "MjkY", hasNextPage: true },
        };
        server
            .mockEndpoint()
            .get("/training-assignments/stream")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.trainingAssignments.stream({
            startTime: "startTime",
        });
        expect(response).toEqual({
            data: [
                {
                    completedAtTime: "2019-06-13T19:08:25Z",
                    course: {
                        id: "9814a1fa-f0c6-408b-bf85-51dc3bc71ac7",
                        revisionId: "1214a1fa-f0c6-408b-bf85-51dc3bc71ac7",
                    },
                    createdAtTime: "2019-06-13T19:08:25Z",
                    createdById: "user-4392",
                    deletedAtTime: "2019-06-13T19:08:25Z",
                    dueAtTime: "2019-06-13T19:08:25Z",
                    durationMinutes: 5883292486284507000,
                    id: "9814a1fa-f0c6-408b-bf85-51dc3bc71ac7",
                    isCompletedLate: true,
                    isOverdue: true,
                    learner: {
                        id: "938172",
                        type: "driver",
                    },
                    scorePercent: 0.20511986669994858,
                    startedAtTime: "2019-06-13T19:08:25Z",
                    status: "notStarted",
                    updatedAtTime: "2019-06-13T19:08:25Z",
                    updatedById: "user-3112",
                },
            ],
            pagination: {
                endCursor: "MjkY",
                hasNextPage: true,
            },
        });
    });
});
