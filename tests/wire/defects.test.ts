/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { SamsaraApiClient } from "../../src/Client";

describe("Defects", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraApiClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });

        const rawResponseBody = {
            comment: "Engine failure.",
            createdAtTime: "2020-01-27T07:06:25Z",
            defectPhotos: [
                {
                    createdAtTime: "2020-01-27T07:06:25Z",
                    url: "https://s3.samsara.com/samsara-driver-media-upload/defect-photo-path",
                },
            ],
            defectTypeId: "25d6151e-29b5-453e-875a-7c5425332e09",
            dvirId: "292371177",
            id: "9700544",
            isResolved: true,
            mechanicNotes: "Broken passenger side window.",
            resolvedAtTime: "2020-01-27T07:06:25Z",
            resolvedBy: { id: "8172", name: "Jane Mechanic", type: "driver" },
            trailer: { externalIds: { key: "value" }, id: "494123" },
            updatedAtTime: "2020-01-27T07:06:25Z",
            vehicle: { externalIds: { key: "value" }, id: "494125" },
        };
        server.mockEndpoint().get("/defects/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.defects.get("id");
        expect(response).toEqual({
            comment: "Engine failure.",
            createdAtTime: "2020-01-27T07:06:25Z",
            defectPhotos: [
                {
                    createdAtTime: "2020-01-27T07:06:25Z",
                    url: "https://s3.samsara.com/samsara-driver-media-upload/defect-photo-path",
                },
            ],
            defectTypeId: "25d6151e-29b5-453e-875a-7c5425332e09",
            dvirId: "292371177",
            id: "9700544",
            isResolved: true,
            mechanicNotes: "Broken passenger side window.",
            resolvedAtTime: "2020-01-27T07:06:25Z",
            resolvedBy: {
                id: "8172",
                name: "Jane Mechanic",
                type: "driver",
            },
            trailer: {
                externalIds: {
                    key: "value",
                },
                id: "494123",
            },
            updatedAtTime: "2020-01-27T07:06:25Z",
            vehicle: {
                externalIds: {
                    key: "value",
                },
                id: "494125",
            },
        });
    });

    test("history", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraApiClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    comment: "Air Compressor not working",
                    createdAtTime: "2020-01-27T07:06:25Z",
                    defectType: "Air Compressor",
                    id: "18",
                    isResolved: true,
                    mechanicNotes: "Extremely large oddly shaped hole in passenger side window.",
                    mechanicNotesUpdatedAtTime: "2020-01-27T07:06:25Z",
                    resolvedAtTime: "2020-01-27T07:06:25Z",
                    resolvedBy: { id: "11", name: "Christopher 'The Handyman' Zhen" },
                    trailer: { id: "123456789", name: "Midwest Trailer #5" },
                    vehicle: {
                        ExternalIds: { maintenanceId: "250020", payrollId: "ABFS18600" },
                        id: "123456789",
                        name: "Midwest Truck #4",
                    },
                },
            ],
            pagination: { endCursor: "MjkY", hasNextPage: true },
        };
        server
            .mockEndpoint()
            .get("/fleet/defects/history")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.defects.history({
            startTime: "startTime",
            endTime: "endTime",
        });
        expect(response).toEqual({
            data: [
                {
                    comment: "Air Compressor not working",
                    createdAtTime: "2020-01-27T07:06:25Z",
                    defectType: "Air Compressor",
                    id: "18",
                    isResolved: true,
                    mechanicNotes: "Extremely large oddly shaped hole in passenger side window.",
                    mechanicNotesUpdatedAtTime: "2020-01-27T07:06:25Z",
                    resolvedAtTime: "2020-01-27T07:06:25Z",
                    resolvedBy: {
                        id: "11",
                        name: "Christopher 'The Handyman' Zhen",
                    },
                    trailer: {
                        id: "123456789",
                        name: "Midwest Trailer #5",
                    },
                    vehicle: {
                        ExternalIds: {
                            maintenanceId: "250020",
                            payrollId: "ABFS18600",
                        },
                        id: "123456789",
                        name: "Midwest Truck #4",
                    },
                },
            ],
            pagination: {
                endCursor: "MjkY",
                hasNextPage: true,
            },
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraApiClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            data: {
                comment: "Air Compressor not working",
                createdAtTime: "2020-01-27T07:06:25Z",
                defectType: "Air Compressor",
                id: "18",
                isResolved: true,
                mechanicNotes: "Extremely large oddly shaped hole in passenger side window.",
                mechanicNotesUpdatedAtTime: "2020-01-27T07:06:25Z",
                resolvedAtTime: "2020-01-27T07:06:25Z",
                resolvedBy: { id: "11", name: "Christopher 'The Handyman' Zhen", type: "driver" },
                trailer: { id: "123456789", name: "Midwest Trailer #5" },
                vehicle: {
                    ExternalIds: { maintenanceId: "250020", payrollId: "ABFS18600" },
                    id: "123456789",
                    name: "Midwest Truck #4",
                },
            },
        };
        server
            .mockEndpoint()
            .patch("/fleet/defects/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.defects.update("id");
        expect(response).toEqual({
            data: {
                comment: "Air Compressor not working",
                createdAtTime: "2020-01-27T07:06:25Z",
                defectType: "Air Compressor",
                id: "18",
                isResolved: true,
                mechanicNotes: "Extremely large oddly shaped hole in passenger side window.",
                mechanicNotesUpdatedAtTime: "2020-01-27T07:06:25Z",
                resolvedAtTime: "2020-01-27T07:06:25Z",
                resolvedBy: {
                    id: "11",
                    name: "Christopher 'The Handyman' Zhen",
                    type: "driver",
                },
                trailer: {
                    id: "123456789",
                    name: "Midwest Trailer #5",
                },
                vehicle: {
                    ExternalIds: {
                        maintenanceId: "250020",
                        payrollId: "ABFS18600",
                    },
                    id: "123456789",
                    name: "Midwest Truck #4",
                },
            },
        });
    });
});
