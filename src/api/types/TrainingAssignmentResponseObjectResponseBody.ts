/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as SamsaraApi from "../index.js";

/**
 * Training Assignment response object.
 */
export interface TrainingAssignmentResponseObjectResponseBody {
    /** Time training assignment is completed. UTC timestamp in RFC 3339 format. Returned when a training assignment completion status is "complete". */
    completedAtTime?: string;
    course: SamsaraApi.TrainingCourseObjectResponseBody;
    /** Creation time of the training assignment. UTC timestamp in RFC 3339 format. */
    createdAtTime: string;
    /** ID of the user who created the training assignment. */
    createdById: string;
    /** Time training assignment is deleted. UTC timestamp in RFC 3339 format. */
    deletedAtTime?: string;
    /** Time training assignment is due. UTC timestamp in RFC 3339 format. Returned when an assignment has a due date set by an admin. */
    dueAtTime?: string;
    /** Time spent on the training assignment. */
    durationMinutes: number;
    /** ID of the training assignment. */
    id: string;
    /** Indicates whether the training assignment was completed on time or not. Returned when a training assignment completion status is "complete" and has a dueAtTime set by an admin. */
    isCompletedLate?: boolean;
    /** Indicates whether the training assignment is past the due date. Returned when a training assignment completion status is 'inProgress' or 'notStarted' and has a dueAtTime set by an admin. */
    isOverdue?: boolean;
    learner: SamsaraApi.TrainingLearnerObjectResponseBody;
    /** Quiz score associated with training assignment. Returned when a training assignment completion status is "complete". */
    scorePercent?: number;
    /** Time training assignment is started. UTC timestamp in RFC 3339 format. Returned when a training assignment completion status is "complete" or "inProgress". */
    startedAtTime?: string;
    /** State for the Training Assignment. Always returned.  Valid values: `notStarted`, `inProgress`, `completed` */
    status: TrainingAssignmentResponseObjectResponseBody.Status;
    /** Time training assignment was updated by either a learner or an admin. UTC timestamp in RFC 3339 format. */
    updatedAtTime: string;
    /** ID of the user who updated the training assignment, either an admin or a learner. */
    updatedById: string;
}

export namespace TrainingAssignmentResponseObjectResponseBody {
    /**
     * State for the Training Assignment. Always returned.  Valid values: `notStarted`, `inProgress`, `completed`
     */
    export type Status = "notStarted" | "inProgress" | "completed";
    export const Status = {
        NotStarted: "notStarted",
        InProgress: "inProgress",
        Completed: "completed",
    } as const;
}
