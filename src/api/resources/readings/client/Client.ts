/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as SamsaraApi from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index.js";

export declare namespace Readings {
    export interface Options {
        environment?: core.Supplier<environments.SamsaraApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-Samsara-Version header */
        version?: "2025-05-12";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        /** Override the X-Samsara-Version header */
        version?: "2025-05-12";
    }
}

export class Readings {
    protected readonly _options: Readings.Options;

    constructor(_options: Readings.Options = {}) {
        this._options = _options;
    }

    /**
     * An introspection endpoint for discovering the set of readings including their name, description, data type, unit, and other metadata.
     *
     *  <b>Rate limit:</b> 10 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).
     *
     * To use this endpoint, select **Read Readings** under the Closed Beta category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>
     *
     *
     *  **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.
     *
     * @param {SamsaraApi.ReadingsDefinitionsRequest} request
     * @param {Readings.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SamsaraApi.UnauthorizedError}
     * @throws {@link SamsaraApi.NotFoundError}
     * @throws {@link SamsaraApi.MethodNotAllowedError}
     * @throws {@link SamsaraApi.TooManyRequestsError}
     * @throws {@link SamsaraApi.InternalServerError}
     * @throws {@link SamsaraApi.NotImplementedError}
     * @throws {@link SamsaraApi.BadGatewayError}
     * @throws {@link SamsaraApi.ServiceUnavailableError}
     * @throws {@link SamsaraApi.GatewayTimeoutError}
     *
     * @example
     *     await client.readings.definitions()
     */
    public async definitions(
        request: SamsaraApi.ReadingsDefinitionsRequest = {},
        requestOptions?: Readings.RequestOptions,
    ): Promise<core.Page<SamsaraApi.ReadingDefinitionResponseBody>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: SamsaraApi.ReadingsDefinitionsRequest,
            ): Promise<core.WithRawResponse<SamsaraApi.ReadingsListReadingsDefinitionsResponseBody>> => {
                const { after, ids, entityTypes } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (after != null) {
                    _queryParams["after"] = after;
                }
                if (ids != null) {
                    _queryParams["ids"] = ids;
                }
                if (entityTypes != null) {
                    _queryParams["entityTypes"] = entityTypes;
                }
                const _response = await core.fetcher({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.SamsaraApiEnvironment.ProductionApi,
                        "readings/definitions",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({
                            Authorization: await this._getAuthorizationHeader(),
                            "X-Samsara-Version": requestOptions?.version,
                        }),
                        requestOptions?.headers,
                    ),
                    queryParameters: _queryParams,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as SamsaraApi.ReadingsListReadingsDefinitionsResponseBody,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 401:
                            throw new SamsaraApi.UnauthorizedError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 404:
                            throw new SamsaraApi.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                        case 405:
                            throw new SamsaraApi.MethodNotAllowedError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 429:
                            throw new SamsaraApi.TooManyRequestsError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 500:
                            throw new SamsaraApi.InternalServerError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 501:
                            throw new SamsaraApi.NotImplementedError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 502:
                            throw new SamsaraApi.BadGatewayError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 503:
                            throw new SamsaraApi.ServiceUnavailableError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 504:
                            throw new SamsaraApi.GatewayTimeoutError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        default:
                            throw new errors.SamsaraApiError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SamsaraApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SamsaraApiTimeoutError(
                            "Timeout exceeded when calling GET /readings/definitions.",
                        );
                    case "unknown":
                        throw new errors.SamsaraApiError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<
            SamsaraApi.ReadingsListReadingsDefinitionsResponseBody,
            SamsaraApi.ReadingDefinitionResponseBody
        >({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) => response?.pagination?.endCursor != null,
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "after", response?.pagination?.endCursor));
            },
        });
    }

    /**
     * Get the values of a reading for a set of entities within the specified time range. Returns a paginated response with data for the specified resource IDs where startTime <= happenedAtTime < endTime. End time of null implies endTime is infinite and all known readings are returned.
     *
     *  <b>Rate limit:</b> 10 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).
     *
     * To use this endpoint, select **Read Readings** under the Closed Beta category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>
     *
     *
     *  **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.
     *
     * @param {SamsaraApi.ReadingsHistoryRequest} request
     * @param {Readings.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SamsaraApi.UnauthorizedError}
     * @throws {@link SamsaraApi.NotFoundError}
     * @throws {@link SamsaraApi.MethodNotAllowedError}
     * @throws {@link SamsaraApi.TooManyRequestsError}
     * @throws {@link SamsaraApi.InternalServerError}
     * @throws {@link SamsaraApi.NotImplementedError}
     * @throws {@link SamsaraApi.BadGatewayError}
     * @throws {@link SamsaraApi.ServiceUnavailableError}
     * @throws {@link SamsaraApi.GatewayTimeoutError}
     *
     * @example
     *     await client.readings.history({
     *         readingId: "readingId",
     *         entityType: "entityType"
     *     })
     */
    public async history(
        request: SamsaraApi.ReadingsHistoryRequest,
        requestOptions?: Readings.RequestOptions,
    ): Promise<core.Page<SamsaraApi.ReadingHistoryResponseBody>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: SamsaraApi.ReadingsHistoryRequest,
            ): Promise<core.WithRawResponse<SamsaraApi.ReadingsGetReadingsHistoryResponseBody>> => {
                const {
                    after,
                    readingId,
                    entityIds,
                    entityType,
                    externalIds,
                    startTime,
                    endTime,
                    feed,
                    includeExternalIds,
                } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (after != null) {
                    _queryParams["after"] = after;
                }
                _queryParams["readingId"] = readingId;
                if (entityIds != null) {
                    _queryParams["entityIds"] = entityIds;
                }
                _queryParams["entityType"] = entityType;
                if (externalIds != null) {
                    _queryParams["externalIds"] = externalIds;
                }
                if (startTime != null) {
                    _queryParams["startTime"] = startTime;
                }
                if (endTime != null) {
                    _queryParams["endTime"] = endTime;
                }
                if (feed != null) {
                    _queryParams["feed"] = feed.toString();
                }
                if (includeExternalIds != null) {
                    _queryParams["includeExternalIds"] = includeExternalIds.toString();
                }
                const _response = await core.fetcher({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.SamsaraApiEnvironment.ProductionApi,
                        "readings/history",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({
                            Authorization: await this._getAuthorizationHeader(),
                            "X-Samsara-Version": requestOptions?.version,
                        }),
                        requestOptions?.headers,
                    ),
                    queryParameters: _queryParams,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as SamsaraApi.ReadingsGetReadingsHistoryResponseBody,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 401:
                            throw new SamsaraApi.UnauthorizedError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 404:
                            throw new SamsaraApi.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                        case 405:
                            throw new SamsaraApi.MethodNotAllowedError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 429:
                            throw new SamsaraApi.TooManyRequestsError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 500:
                            throw new SamsaraApi.InternalServerError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 501:
                            throw new SamsaraApi.NotImplementedError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 502:
                            throw new SamsaraApi.BadGatewayError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 503:
                            throw new SamsaraApi.ServiceUnavailableError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 504:
                            throw new SamsaraApi.GatewayTimeoutError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        default:
                            throw new errors.SamsaraApiError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SamsaraApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SamsaraApiTimeoutError("Timeout exceeded when calling GET /readings/history.");
                    case "unknown":
                        throw new errors.SamsaraApiError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<
            SamsaraApi.ReadingsGetReadingsHistoryResponseBody,
            SamsaraApi.ReadingHistoryResponseBody
        >({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) => response?.pagination?.endCursor != null,
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "after", response?.pagination?.endCursor));
            },
        });
    }

    /**
     * An endpoint to get the last value of a reading for a set of entities at the specified time.
     *
     *  <b>Rate limit:</b> 10 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).
     *
     * To use this endpoint, select **Read Readings** under the Closed Beta category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>
     *
     *
     *  **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.
     *
     * @param {SamsaraApi.ReadingsLatestRequest} request
     * @param {Readings.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SamsaraApi.UnauthorizedError}
     * @throws {@link SamsaraApi.NotFoundError}
     * @throws {@link SamsaraApi.MethodNotAllowedError}
     * @throws {@link SamsaraApi.TooManyRequestsError}
     * @throws {@link SamsaraApi.InternalServerError}
     * @throws {@link SamsaraApi.NotImplementedError}
     * @throws {@link SamsaraApi.BadGatewayError}
     * @throws {@link SamsaraApi.ServiceUnavailableError}
     * @throws {@link SamsaraApi.GatewayTimeoutError}
     *
     * @example
     *     await client.readings.latest({
     *         readingIds: "readingIds",
     *         entityType: "entityType"
     *     })
     */
    public async latest(
        request: SamsaraApi.ReadingsLatestRequest,
        requestOptions?: Readings.RequestOptions,
    ): Promise<core.Page<SamsaraApi.ReadingSnapshotResponseBody>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: SamsaraApi.ReadingsLatestRequest,
            ): Promise<core.WithRawResponse<SamsaraApi.ReadingsGetReadingsSnapshotResponseBody>> => {
                const { after, readingIds, entityIds, externalIds, asOfTime, entityType, includeExternalIds } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (after != null) {
                    _queryParams["after"] = after;
                }
                _queryParams["readingIds"] = readingIds;
                if (entityIds != null) {
                    _queryParams["entityIds"] = entityIds;
                }
                if (externalIds != null) {
                    _queryParams["externalIds"] = externalIds;
                }
                if (asOfTime != null) {
                    _queryParams["asOfTime"] = asOfTime;
                }
                _queryParams["entityType"] = entityType;
                if (includeExternalIds != null) {
                    _queryParams["includeExternalIds"] = includeExternalIds.toString();
                }
                const _response = await core.fetcher({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.SamsaraApiEnvironment.ProductionApi,
                        "readings/latest",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({
                            Authorization: await this._getAuthorizationHeader(),
                            "X-Samsara-Version": requestOptions?.version,
                        }),
                        requestOptions?.headers,
                    ),
                    queryParameters: _queryParams,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as SamsaraApi.ReadingsGetReadingsSnapshotResponseBody,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 401:
                            throw new SamsaraApi.UnauthorizedError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 404:
                            throw new SamsaraApi.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                        case 405:
                            throw new SamsaraApi.MethodNotAllowedError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 429:
                            throw new SamsaraApi.TooManyRequestsError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 500:
                            throw new SamsaraApi.InternalServerError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 501:
                            throw new SamsaraApi.NotImplementedError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 502:
                            throw new SamsaraApi.BadGatewayError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 503:
                            throw new SamsaraApi.ServiceUnavailableError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 504:
                            throw new SamsaraApi.GatewayTimeoutError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        default:
                            throw new errors.SamsaraApiError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SamsaraApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SamsaraApiTimeoutError("Timeout exceeded when calling GET /readings/latest.");
                    case "unknown":
                        throw new errors.SamsaraApiError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<
            SamsaraApi.ReadingsGetReadingsSnapshotResponseBody,
            SamsaraApi.ReadingSnapshotResponseBody
        >({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) => response?.pagination?.endCursor != null,
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "after", response?.pagination?.endCursor));
            },
        });
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["SAMSARA_API_KEY"];
        if (bearer == null) {
            throw new errors.SamsaraApiError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a SAMSARA_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
