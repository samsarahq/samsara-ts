/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Samsara from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index.js";

export declare namespace Hos {
    export interface Options {
        environment?: core.Supplier<environments.SamsaraEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-Samsara-Version header */
        version?: "2025-05-12";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        /** Override the X-Samsara-Version header */
        version?: "2025-05-12";
    }
}

export class Hos {
    protected readonly _options: Hos.Options;

    constructor(_options: Hos.Options = {}) {
        this._options = _options;
    }

    /**
     * Get the current HOS status for all drivers. Note that this includes inactive as well as active drivers. The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/getFleetHosLogsSummary).
     *
     *  **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.
     *
     * To use this endpoint, select **Read ELD Compliance Settings (US)** under the Compliance category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>
     *
     * @param {Samsara.HosClocksRequest} request
     * @param {Hos.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.hos.clocks()
     */
    public clocks(
        request: Samsara.HosClocksRequest = {},
        requestOptions?: Hos.RequestOptions,
    ): core.HttpResponsePromise<Samsara.HosClocksResponse> {
        return core.HttpResponsePromise.fromPromise(this.__clocks(request, requestOptions));
    }

    private async __clocks(
        request: Samsara.HosClocksRequest = {},
        requestOptions?: Hos.RequestOptions,
    ): Promise<core.WithRawResponse<Samsara.HosClocksResponse>> {
        const { tagIds, parentTagIds, driverIds, after, limit } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (tagIds != null) {
            if (Array.isArray(tagIds)) {
                _queryParams["tagIds"] = tagIds.map((item) => item);
            } else {
                _queryParams["tagIds"] = tagIds;
            }
        }

        if (parentTagIds != null) {
            if (Array.isArray(parentTagIds)) {
                _queryParams["parentTagIds"] = parentTagIds.map((item) => item);
            } else {
                _queryParams["parentTagIds"] = parentTagIds;
            }
        }

        if (driverIds != null) {
            if (Array.isArray(driverIds)) {
                _queryParams["driverIds"] = driverIds.map((item) => item);
            } else {
                _queryParams["driverIds"] = driverIds;
            }
        }

        if (after != null) {
            _queryParams["after"] = after;
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SamsaraEnvironment.ProductionApi,
                "fleet/hos/clocks",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Samsara-Version": requestOptions?.version,
                }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Samsara.HosClocksResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SamsaraError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SamsaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SamsaraTimeoutError("Timeout exceeded when calling GET /fleet/hos/clocks.");
            case "unknown":
                throw new errors.SamsaraError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get summarized daily Hours of Service charts for the specified drivers.
     *
     * The time range for a log is defined by the `driver`'s `eldDayStartHour`. This value is configurable per driver.
     *
     * The `startDate` and `endDate` parameters indicate the date range you'd like to retrieve daily logs for. A daily log will be returned if its `startTime` is on any of the days within in this date range (inclusive of `startDate` and `endDate`).
     *
     * **Note:** If data is still being uploaded from the Samsara Driver App, it may not be completely reflected in the response from this endpoint. The best practice is to wait a couple of days before querying this endpoint to make sure that all data from the Samsara Driver App has been uploaded.
     *
     * If you are using the legacy version of this endpoint and looking for its documentation, you can find it [here](https://www.samsara.com/api-legacy#operation/getFleetDriversHosDailyLogs).
     *
     *  <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).
     *
     * To use this endpoint, select **Read ELD Compliance Settings (US)** under the Compliance category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>
     *
     *
     *  **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.
     *
     * @param {Samsara.HosDailyLogsRequest} request
     * @param {Hos.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Samsara.UnauthorizedError}
     * @throws {@link Samsara.NotFoundError}
     * @throws {@link Samsara.MethodNotAllowedError}
     * @throws {@link Samsara.TooManyRequestsError}
     * @throws {@link Samsara.InternalServerError}
     * @throws {@link Samsara.NotImplementedError}
     * @throws {@link Samsara.BadGatewayError}
     * @throws {@link Samsara.ServiceUnavailableError}
     * @throws {@link Samsara.GatewayTimeoutError}
     *
     * @example
     *     await client.hos.dailyLogs()
     */
    public async dailyLogs(
        request: Samsara.HosDailyLogsRequest = {},
        requestOptions?: Hos.RequestOptions,
    ): Promise<core.Page<Samsara.HosDailyLogsObjectResponseBody>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: Samsara.HosDailyLogsRequest,
            ): Promise<core.WithRawResponse<Samsara.HosDailyLogsGetHosDailyLogsResponseBody>> => {
                const { driverIds, startDate, endDate, tagIds, parentTagIds, driverActivationStatus, after, expand } =
                    request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (driverIds != null) {
                    if (Array.isArray(driverIds)) {
                        _queryParams["driverIds"] = driverIds.map((item) => item);
                    } else {
                        _queryParams["driverIds"] = driverIds;
                    }
                }
                if (startDate != null) {
                    _queryParams["startDate"] = startDate;
                }
                if (endDate != null) {
                    _queryParams["endDate"] = endDate;
                }
                if (tagIds != null) {
                    _queryParams["tagIds"] = tagIds;
                }
                if (parentTagIds != null) {
                    _queryParams["parentTagIds"] = parentTagIds;
                }
                if (driverActivationStatus != null) {
                    _queryParams["driverActivationStatus"] = driverActivationStatus;
                }
                if (after != null) {
                    _queryParams["after"] = after;
                }
                if (expand != null) {
                    _queryParams["expand"] = expand;
                }
                const _response = await core.fetcher({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.SamsaraEnvironment.ProductionApi,
                        "fleet/hos/daily-logs",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({
                            Authorization: await this._getAuthorizationHeader(),
                            "X-Samsara-Version": requestOptions?.version,
                        }),
                        requestOptions?.headers,
                    ),
                    queryParameters: _queryParams,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as Samsara.HosDailyLogsGetHosDailyLogsResponseBody,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 401:
                            throw new Samsara.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                        case 404:
                            throw new Samsara.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                        case 405:
                            throw new Samsara.MethodNotAllowedError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 429:
                            throw new Samsara.TooManyRequestsError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 500:
                            throw new Samsara.InternalServerError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 501:
                            throw new Samsara.NotImplementedError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 502:
                            throw new Samsara.BadGatewayError(_response.error.body as unknown, _response.rawResponse);
                        case 503:
                            throw new Samsara.ServiceUnavailableError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 504:
                            throw new Samsara.GatewayTimeoutError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        default:
                            throw new errors.SamsaraError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SamsaraError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SamsaraTimeoutError(
                            "Timeout exceeded when calling GET /fleet/hos/daily-logs.",
                        );
                    case "unknown":
                        throw new errors.SamsaraError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<
            Samsara.HosDailyLogsGetHosDailyLogsResponseBody,
            Samsara.HosDailyLogsObjectResponseBody
        >({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) => response?.pagination?.endCursor != null,
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "after", response?.pagination?.endCursor));
            },
        });
    }

    /**
     * Returns HOS logs between a given `startTime` and `endTime`. The logs can be further filtered using tags or by providing a list of driver IDs (including external IDs). The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/getFleetHosLogs).
     *
     * **Note:** If data is still being uploaded from the Samsara Driver App, it may not be completely reflected in the response from this endpoint. The best practice is to wait a couple of days before querying this endpoint to make sure that all data from the Samsara Driver App has been uploaded.
     *
     *  <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).
     *
     *  **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.
     *
     * To use this endpoint, select **Read ELD Compliance Settings (US)** under the Compliance category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>
     *
     * @param {Samsara.HosLogsRequest} request
     * @param {Hos.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.hos.logs()
     */
    public logs(
        request: Samsara.HosLogsRequest = {},
        requestOptions?: Hos.RequestOptions,
    ): core.HttpResponsePromise<Samsara.HosLogsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__logs(request, requestOptions));
    }

    private async __logs(
        request: Samsara.HosLogsRequest = {},
        requestOptions?: Hos.RequestOptions,
    ): Promise<core.WithRawResponse<Samsara.HosLogsResponse>> {
        const { tagIds, parentTagIds, driverIds, startTime, endTime, after } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (tagIds != null) {
            if (Array.isArray(tagIds)) {
                _queryParams["tagIds"] = tagIds.map((item) => item);
            } else {
                _queryParams["tagIds"] = tagIds;
            }
        }

        if (parentTagIds != null) {
            if (Array.isArray(parentTagIds)) {
                _queryParams["parentTagIds"] = parentTagIds.map((item) => item);
            } else {
                _queryParams["parentTagIds"] = parentTagIds;
            }
        }

        if (driverIds != null) {
            if (Array.isArray(driverIds)) {
                _queryParams["driverIds"] = driverIds.map((item) => item);
            } else {
                _queryParams["driverIds"] = driverIds;
            }
        }

        if (startTime != null) {
            _queryParams["startTime"] = startTime;
        }

        if (endTime != null) {
            _queryParams["endTime"] = endTime;
        }

        if (after != null) {
            _queryParams["after"] = after;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SamsaraEnvironment.ProductionApi,
                "fleet/hos/logs",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Samsara-Version": requestOptions?.version,
                }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Samsara.HosLogsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SamsaraError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SamsaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SamsaraTimeoutError("Timeout exceeded when calling GET /fleet/hos/logs.");
            case "unknown":
                throw new errors.SamsaraError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get active Hours of Service violations for the specified drivers.
     *
     * The day object time range for a violation is defined by the `driver`'s `eldDayStartHour`. This value is configurable per driver.
     *
     * The `startTime` and `endTime` parameters indicate the datetime range you'd like to retrieve violations for. A violation will be returned if its `violationStartTime` falls within this datetime range (inclusive of `startTime` and `endTime`)
     *
     * **Note:** The following are all the violation types with a short explanation about what each of them means: `californiaMealbreakMissed` (Missed California Meal Break), `cycleHoursOn` (Cycle Limit), `cycleOffHoursAfterOnDutyHours` (Cycle 2 Limit), `dailyDrivingHours` (Daily Driving Limit), `dailyOffDutyDeferralAddToDay2Consecutive` (Daily Off-Duty Deferral: Add To Day2 Consecutive), `dailyOffDutyDeferralNotPartMandatory` (Daily Off-Duty Deferral: Not Part Of Mandatory), `dailyOffDutyDeferralTwoDayDrivingLimit` (Daily Off-Duty Deferral: 2 Day Driving Limit), `dailyOffDutyDeferralTwoDayOffDuty` (Daily Off-Duty Deferral: 2 Day Off Duty), `dailyOffDutyNonResetHours` (Daily Off-Duty Time: Non-Reset), `dailyOffDutyTotalHours` (Daily Off-Duty Time), `dailyOnDutyHours` (Daily On-Duty Limit), `mandatory24HoursOffDuty` (24 Hours of Off Duty required), `restbreakMissed` (Missed Rest Break), `shiftDrivingHours` (Shift Driving Limit), `shiftHours` (Shift Duty Limit), `shiftOnDutyHours` (Shift On-Duty Limit), `unsubmittedLogs` (Missing Driver Certification)
     *
     *  <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).
     *
     * To use this endpoint, select **Read ELD Compliance Settings (US)** under the Compliance category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>
     *
     *
     *  **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.
     *
     * @param {Samsara.HosViolationsRequest} request
     * @param {Hos.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Samsara.UnauthorizedError}
     * @throws {@link Samsara.NotFoundError}
     * @throws {@link Samsara.MethodNotAllowedError}
     * @throws {@link Samsara.TooManyRequestsError}
     * @throws {@link Samsara.InternalServerError}
     * @throws {@link Samsara.NotImplementedError}
     * @throws {@link Samsara.BadGatewayError}
     * @throws {@link Samsara.ServiceUnavailableError}
     * @throws {@link Samsara.GatewayTimeoutError}
     *
     * @example
     *     await client.hos.violations()
     */
    public async violations(
        request: Samsara.HosViolationsRequest = {},
        requestOptions?: Hos.RequestOptions,
    ): Promise<core.Page<Samsara.HosViolationsObjectResponseBody>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: Samsara.HosViolationsRequest,
            ): Promise<core.WithRawResponse<Samsara.HosViolationsGetHosViolationsResponseBody>> => {
                const { driverIds, startTime, endTime, tagIds, parentTagIds, types, after } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (driverIds != null) {
                    if (Array.isArray(driverIds)) {
                        _queryParams["driverIds"] = driverIds.map((item) => item);
                    } else {
                        _queryParams["driverIds"] = driverIds;
                    }
                }
                if (startTime != null) {
                    _queryParams["startTime"] = startTime;
                }
                if (endTime != null) {
                    _queryParams["endTime"] = endTime;
                }
                if (tagIds != null) {
                    _queryParams["tagIds"] = tagIds;
                }
                if (parentTagIds != null) {
                    _queryParams["parentTagIds"] = parentTagIds;
                }
                if (types != null) {
                    if (Array.isArray(types)) {
                        _queryParams["types"] = types.map((item) => item);
                    } else {
                        _queryParams["types"] = types;
                    }
                }
                if (after != null) {
                    _queryParams["after"] = after;
                }
                const _response = await core.fetcher({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.SamsaraEnvironment.ProductionApi,
                        "fleet/hos/violations",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({
                            Authorization: await this._getAuthorizationHeader(),
                            "X-Samsara-Version": requestOptions?.version,
                        }),
                        requestOptions?.headers,
                    ),
                    queryParameters: _queryParams,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as Samsara.HosViolationsGetHosViolationsResponseBody,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 401:
                            throw new Samsara.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                        case 404:
                            throw new Samsara.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                        case 405:
                            throw new Samsara.MethodNotAllowedError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 429:
                            throw new Samsara.TooManyRequestsError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 500:
                            throw new Samsara.InternalServerError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 501:
                            throw new Samsara.NotImplementedError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 502:
                            throw new Samsara.BadGatewayError(_response.error.body as unknown, _response.rawResponse);
                        case 503:
                            throw new Samsara.ServiceUnavailableError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 504:
                            throw new Samsara.GatewayTimeoutError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        default:
                            throw new errors.SamsaraError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SamsaraError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SamsaraTimeoutError(
                            "Timeout exceeded when calling GET /fleet/hos/violations.",
                        );
                    case "unknown":
                        throw new errors.SamsaraError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<
            Samsara.HosViolationsGetHosViolationsResponseBody,
            Samsara.HosViolationsObjectResponseBody
        >({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) => response?.pagination?.endCursor != null,
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "after", response?.pagination?.endCursor));
            },
        });
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["SAMSARA_API_KEY"];
        if (bearer == null) {
            throw new errors.SamsaraError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a SAMSARA_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
