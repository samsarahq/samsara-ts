/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Samsara from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index.js";

export declare namespace Webhooks {
    export interface Options {
        environment?: core.Supplier<environments.SamsaraEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-Samsara-Version header */
        version?: "2025-05-12";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        /** Override the X-Samsara-Version header */
        version?: "2025-05-12";
    }
}

export class Webhooks {
    protected readonly _options: Webhooks.Options;

    constructor(_options: Webhooks.Options = {}) {
        this._options = _options;
    }

    /**
     * List all webhooks belonging to a specific org.
     *
     *  <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).
     *
     * To use this endpoint, select **Read Webhooks** under the Setup & Administration category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>
     *
     *
     *  **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.
     *
     * @param {Samsara.WebhooksListRequest} request
     * @param {Webhooks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Samsara.UnauthorizedError}
     * @throws {@link Samsara.NotFoundError}
     * @throws {@link Samsara.MethodNotAllowedError}
     * @throws {@link Samsara.TooManyRequestsError}
     * @throws {@link Samsara.InternalServerError}
     * @throws {@link Samsara.NotImplementedError}
     * @throws {@link Samsara.BadGatewayError}
     * @throws {@link Samsara.ServiceUnavailableError}
     * @throws {@link Samsara.GatewayTimeoutError}
     *
     * @example
     *     await client.webhooks.list()
     */
    public async list(
        request: Samsara.WebhooksListRequest = {},
        requestOptions?: Webhooks.RequestOptions,
    ): Promise<core.Page<Samsara.WebhookResponseResponseBody>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: Samsara.WebhooksListRequest,
            ): Promise<core.WithRawResponse<Samsara.WebhooksListWebhooksResponseBody>> => {
                const { ids, limit, after } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (ids != null) {
                    _queryParams["ids"] = ids;
                }
                if (limit != null) {
                    _queryParams["limit"] = limit.toString();
                }
                if (after != null) {
                    _queryParams["after"] = after;
                }
                const _response = await core.fetcher({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.SamsaraEnvironment.ProductionApi,
                        "webhooks",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({
                            Authorization: await this._getAuthorizationHeader(),
                            "X-Samsara-Version": requestOptions?.version,
                        }),
                        requestOptions?.headers,
                    ),
                    queryParameters: _queryParams,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as Samsara.WebhooksListWebhooksResponseBody,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 401:
                            throw new Samsara.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                        case 404:
                            throw new Samsara.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                        case 405:
                            throw new Samsara.MethodNotAllowedError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 429:
                            throw new Samsara.TooManyRequestsError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 500:
                            throw new Samsara.InternalServerError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 501:
                            throw new Samsara.NotImplementedError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 502:
                            throw new Samsara.BadGatewayError(_response.error.body as unknown, _response.rawResponse);
                        case 503:
                            throw new Samsara.ServiceUnavailableError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 504:
                            throw new Samsara.GatewayTimeoutError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        default:
                            throw new errors.SamsaraError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SamsaraError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SamsaraTimeoutError("Timeout exceeded when calling GET /webhooks.");
                    case "unknown":
                        throw new errors.SamsaraError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<Samsara.WebhooksListWebhooksResponseBody, Samsara.WebhookResponseResponseBody>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) => response?.pagination?.endCursor != null,
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "after", response?.pagination?.endCursor));
            },
        });
    }

    /**
     * Create a webhook
     *
     *  <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).
     *
     * To use this endpoint, select **Write Webhooks** under the Setup & Administration category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>
     *
     *
     *  **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.
     *
     * @param {Samsara.WebhooksPostWebhooksRequestBody} request
     * @param {Webhooks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Samsara.UnauthorizedError}
     * @throws {@link Samsara.NotFoundError}
     * @throws {@link Samsara.MethodNotAllowedError}
     * @throws {@link Samsara.TooManyRequestsError}
     * @throws {@link Samsara.InternalServerError}
     * @throws {@link Samsara.NotImplementedError}
     * @throws {@link Samsara.BadGatewayError}
     * @throws {@link Samsara.ServiceUnavailableError}
     * @throws {@link Samsara.GatewayTimeoutError}
     *
     * @example
     *     await client.webhooks.create({
     *         name: "Webhook-123",
     *         url: "https://www.Webhook-123.com/webhook/listener"
     *     })
     */
    public create(
        request: Samsara.WebhooksPostWebhooksRequestBody,
        requestOptions?: Webhooks.RequestOptions,
    ): core.HttpResponsePromise<Samsara.WebhooksPostWebhooksResponseBody> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Samsara.WebhooksPostWebhooksRequestBody,
        requestOptions?: Webhooks.RequestOptions,
    ): Promise<core.WithRawResponse<Samsara.WebhooksPostWebhooksResponseBody>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SamsaraEnvironment.ProductionApi,
                "webhooks",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Samsara-Version": requestOptions?.version,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Samsara.WebhooksPostWebhooksResponseBody,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Samsara.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Samsara.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 405:
                    throw new Samsara.MethodNotAllowedError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Samsara.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Samsara.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 501:
                    throw new Samsara.NotImplementedError(_response.error.body as unknown, _response.rawResponse);
                case 502:
                    throw new Samsara.BadGatewayError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Samsara.ServiceUnavailableError(_response.error.body as unknown, _response.rawResponse);
                case 504:
                    throw new Samsara.GatewayTimeoutError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.SamsaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SamsaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SamsaraTimeoutError("Timeout exceeded when calling POST /webhooks.");
            case "unknown":
                throw new errors.SamsaraError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve a webhook with given ID.
     *
     *  <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).
     *
     * To use this endpoint, select **Read Webhooks** under the Setup & Administration category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>
     *
     *
     *  **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.
     *
     * @param {string} id - ID of the webhook. This is the Samsara-specified ID.
     * @param {Webhooks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Samsara.UnauthorizedError}
     * @throws {@link Samsara.NotFoundError}
     * @throws {@link Samsara.MethodNotAllowedError}
     * @throws {@link Samsara.TooManyRequestsError}
     * @throws {@link Samsara.InternalServerError}
     * @throws {@link Samsara.NotImplementedError}
     * @throws {@link Samsara.BadGatewayError}
     * @throws {@link Samsara.ServiceUnavailableError}
     * @throws {@link Samsara.GatewayTimeoutError}
     *
     * @example
     *     await client.webhooks.get("id")
     */
    public get(
        id: string,
        requestOptions?: Webhooks.RequestOptions,
    ): core.HttpResponsePromise<Samsara.WebhooksGetWebhookResponseBody> {
        return core.HttpResponsePromise.fromPromise(this.__get(id, requestOptions));
    }

    private async __get(
        id: string,
        requestOptions?: Webhooks.RequestOptions,
    ): Promise<core.WithRawResponse<Samsara.WebhooksGetWebhookResponseBody>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SamsaraEnvironment.ProductionApi,
                `webhooks/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Samsara-Version": requestOptions?.version,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Samsara.WebhooksGetWebhookResponseBody,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Samsara.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Samsara.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 405:
                    throw new Samsara.MethodNotAllowedError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Samsara.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Samsara.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 501:
                    throw new Samsara.NotImplementedError(_response.error.body as unknown, _response.rawResponse);
                case 502:
                    throw new Samsara.BadGatewayError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Samsara.ServiceUnavailableError(_response.error.body as unknown, _response.rawResponse);
                case 504:
                    throw new Samsara.GatewayTimeoutError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.SamsaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SamsaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SamsaraTimeoutError("Timeout exceeded when calling GET /webhooks/{id}.");
            case "unknown":
                throw new errors.SamsaraError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete a webhook with the given ID.
     *
     *  <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).
     *
     * To use this endpoint, select **Write Webhooks** under the Setup & Administration category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>
     *
     *
     *  **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.
     *
     * @param {string} id - Unique identifier for the webhook to delete.
     * @param {Webhooks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Samsara.UnauthorizedError}
     * @throws {@link Samsara.NotFoundError}
     * @throws {@link Samsara.MethodNotAllowedError}
     * @throws {@link Samsara.TooManyRequestsError}
     * @throws {@link Samsara.InternalServerError}
     * @throws {@link Samsara.NotImplementedError}
     * @throws {@link Samsara.BadGatewayError}
     * @throws {@link Samsara.ServiceUnavailableError}
     * @throws {@link Samsara.GatewayTimeoutError}
     *
     * @example
     *     await client.webhooks.delete("id")
     */
    public delete(id: string, requestOptions?: Webhooks.RequestOptions): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__delete(id, requestOptions));
    }

    private async __delete(id: string, requestOptions?: Webhooks.RequestOptions): Promise<core.WithRawResponse<void>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SamsaraEnvironment.ProductionApi,
                `webhooks/${encodeURIComponent(id)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Samsara-Version": requestOptions?.version,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Samsara.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Samsara.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 405:
                    throw new Samsara.MethodNotAllowedError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Samsara.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Samsara.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 501:
                    throw new Samsara.NotImplementedError(_response.error.body as unknown, _response.rawResponse);
                case 502:
                    throw new Samsara.BadGatewayError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Samsara.ServiceUnavailableError(_response.error.body as unknown, _response.rawResponse);
                case 504:
                    throw new Samsara.GatewayTimeoutError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.SamsaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SamsaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SamsaraTimeoutError("Timeout exceeded when calling DELETE /webhooks/{id}.");
            case "unknown":
                throw new errors.SamsaraError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update a specific webhook's information.  **Note** this implementation of patch uses [the JSON merge patch](https://tools.ietf.org/html/rfc7396) proposed standard.
     *  This means that any fields included in the patch request will _overwrite_ fields which exist on the target resource.
     *  For arrays, this means any array included in the request will _replace_ the array that exists at the specified path, it will not _add_ to the existing array
     *
     *  <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).
     *
     * To use this endpoint, select **Write Webhooks** under the Setup & Administration category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>
     *
     *
     *  **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.
     *
     * @param {string} id - Unique identifier for the webhook to update.
     * @param {Samsara.WebhooksPatchWebhookRequestBody} request
     * @param {Webhooks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Samsara.UnauthorizedError}
     * @throws {@link Samsara.NotFoundError}
     * @throws {@link Samsara.MethodNotAllowedError}
     * @throws {@link Samsara.TooManyRequestsError}
     * @throws {@link Samsara.InternalServerError}
     * @throws {@link Samsara.NotImplementedError}
     * @throws {@link Samsara.BadGatewayError}
     * @throws {@link Samsara.ServiceUnavailableError}
     * @throws {@link Samsara.GatewayTimeoutError}
     *
     * @example
     *     await client.webhooks.patch("id")
     */
    public patch(
        id: string,
        request: Samsara.WebhooksPatchWebhookRequestBody = {},
        requestOptions?: Webhooks.RequestOptions,
    ): core.HttpResponsePromise<Samsara.WebhooksPatchWebhookResponseBody> {
        return core.HttpResponsePromise.fromPromise(this.__patch(id, request, requestOptions));
    }

    private async __patch(
        id: string,
        request: Samsara.WebhooksPatchWebhookRequestBody = {},
        requestOptions?: Webhooks.RequestOptions,
    ): Promise<core.WithRawResponse<Samsara.WebhooksPatchWebhookResponseBody>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SamsaraEnvironment.ProductionApi,
                `webhooks/${encodeURIComponent(id)}`,
            ),
            method: "PATCH",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Samsara-Version": requestOptions?.version,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Samsara.WebhooksPatchWebhookResponseBody,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Samsara.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Samsara.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 405:
                    throw new Samsara.MethodNotAllowedError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Samsara.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Samsara.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 501:
                    throw new Samsara.NotImplementedError(_response.error.body as unknown, _response.rawResponse);
                case 502:
                    throw new Samsara.BadGatewayError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Samsara.ServiceUnavailableError(_response.error.body as unknown, _response.rawResponse);
                case 504:
                    throw new Samsara.GatewayTimeoutError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.SamsaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SamsaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SamsaraTimeoutError("Timeout exceeded when calling PATCH /webhooks/{id}.");
            case "unknown":
                throw new errors.SamsaraError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["SAMSARA_API_KEY"];
        if (bearer == null) {
            throw new errors.SamsaraError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a SAMSARA_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
