/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Samsara from "../index.js";

export interface RoutesStopResponseObjectResponseBody {
    /** Actual arrival time, if it exists, for the route stop in RFC 3339 format. */
    actualArrivalTime?: string;
    /** Actual departure time, if it exists, for the route stop in RFC 3339 format. */
    actualDepartureTime?: string;
    address?: Samsara.GoaAddressTinyResponseResponseBody;
    /** List of documents associated with the stop. */
    documents?: Samsara.GoaDocumentTinyResponseResponseBody[];
    /** The time the stop became en-route, in RFC 3339 format. */
    enRouteTime?: string;
    /** Estimated time of arrival, if this stop is currently en-route, in RFC 3339 format. */
    eta?: string;
    /** A map of external ids */
    externalIds?: Record<string, string>;
    /** Id of the stop */
    id: string;
    /** The shareable url of the stop's current status. */
    liveSharingUrl?: string;
    /** List of shareable, non-expired 'By Location' Live Sharing Links. */
    locationLiveSharingLinks?: Samsara.LiveSharingLinkResponseObjectResponseBody[];
    /** Name of the stop */
    name: string;
    /** Notes for the stop */
    notes?: string;
    /** Specifies the time window (in milliseconds) after a stop's scheduled arrival time during which the stop is considered 'on-time'. */
    ontimeWindowAfterArrivalMs?: number;
    /** Specifies the time window (in milliseconds) before a stop's scheduled arrival time during which the stop is considered 'on-time'. */
    ontimeWindowBeforeArrivalMs?: number;
    /** Scheduled arrival time, if it exists, for the stop in RFC 3339 format. */
    scheduledArrivalTime?: string;
    /** Scheduled departure time, if it exists, for the stop in RFC 3339 format. */
    scheduledDepartureTime?: string;
    singleUseLocation?: Samsara.RoutesSingleUseAddressObjectResponseBody;
    /** Skipped time, if it exists, for the route stop in RFC 3339 format. */
    skippedTime?: string;
    /** The current state of the route stop.  Valid values: `unassigned`, `scheduled`, `en route`, `skipped`, `arrived`, `departed` */
    state: RoutesStopResponseObjectResponseBody.State;
}

export namespace RoutesStopResponseObjectResponseBody {
    /**
     * The current state of the route stop.  Valid values: `unassigned`, `scheduled`, `en route`, `skipped`, `arrived`, `departed`
     */
    export type State = "unassigned" | "scheduled" | "en route" | "skipped" | "arrived" | "departed";
    export const State = {
        Unassigned: "unassigned",
        Scheduled: "scheduled",
        EnRoute: "en route",
        Skipped: "skipped",
        Arrived: "arrived",
        Departed: "departed",
    } as const;
}
