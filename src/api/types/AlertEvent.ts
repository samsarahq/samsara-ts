/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface AlertEvent {
    /** Link to the alert in the Samsara dashboard */
    alertEventUrl: string;
    /** Human-readable description of the alert condition */
    alertConditionDescription: string;
    /** Identifier for the type of alert */
    alertConditionId: AlertEvent.AlertConditionId;
    /** Human-readable string with dynamic details about the alert */
    details: string;
    /** Organization ID */
    orgId: number;
    /** Whether the alert has been resolved */
    resolved: boolean;
    /** Unix epoch timestamp when the event was triggered */
    startMs: number;
    /** Brief summary of the event */
    summary: string;
    device?: AlertEvent.Device;
    driver?: AlertEvent.Driver;
    /** DVIR-specific fields */
    dvir?: AlertEvent.Dvir;
}

export namespace AlertEvent {
    /**
     * Identifier for the type of alert
     */
    export type AlertConditionId =
        | "DeviceHasVehicleFault"
        | "DeviceUnplugged"
        | "HarshEvent"
        | "DeviceLocationInsideGeofence"
        | "DeviceLocationOutsideGeofence"
        | "DriverDocumentSubmitted"
        | "DeviceSpeedAbove"
        | "DeviceSpeedAboveSpeedLimit"
        | "DeviceMovement"
        | "EngineIdle"
        | "BatteryLow"
        | "DashcamDisconnected"
        | "HosViolation"
        | "VehicleFuelLevelBelow"
        | "TemperatureBelow"
        | "TemperatureAbove"
        | "HumidityBelow"
        | "HumidityAbove"
        | "DeviceDisconnect"
        | "BatteryVoltageBelow"
        | "DoorActivated"
        | "DispatchRouteETAThreshold"
        | "ReeferHasNewAlarm"
        | "ReeferTemperatureAboveSetPoint"
        | "ReeferTemperatureBelowSetPoint"
        | "ScheduledMaintenanceDate"
        | "ScheduledMaintenanceEngineHours"
        | "ScheduledMaintenanceOdometer"
        | "UnsafeDvir"
        | "SafeDvirWithDefects"
        | "PanicButtonPressed";
    export const AlertConditionId = {
        DeviceHasVehicleFault: "DeviceHasVehicleFault",
        DeviceUnplugged: "DeviceUnplugged",
        HarshEvent: "HarshEvent",
        DeviceLocationInsideGeofence: "DeviceLocationInsideGeofence",
        DeviceLocationOutsideGeofence: "DeviceLocationOutsideGeofence",
        DriverDocumentSubmitted: "DriverDocumentSubmitted",
        DeviceSpeedAbove: "DeviceSpeedAbove",
        DeviceSpeedAboveSpeedLimit: "DeviceSpeedAboveSpeedLimit",
        DeviceMovement: "DeviceMovement",
        EngineIdle: "EngineIdle",
        BatteryLow: "BatteryLow",
        DashcamDisconnected: "DashcamDisconnected",
        HosViolation: "HosViolation",
        VehicleFuelLevelBelow: "VehicleFuelLevelBelow",
        TemperatureBelow: "TemperatureBelow",
        TemperatureAbove: "TemperatureAbove",
        HumidityBelow: "HumidityBelow",
        HumidityAbove: "HumidityAbove",
        DeviceDisconnect: "DeviceDisconnect",
        BatteryVoltageBelow: "BatteryVoltageBelow",
        DoorActivated: "DoorActivated",
        DispatchRouteEtaThreshold: "DispatchRouteETAThreshold",
        ReeferHasNewAlarm: "ReeferHasNewAlarm",
        ReeferTemperatureAboveSetPoint: "ReeferTemperatureAboveSetPoint",
        ReeferTemperatureBelowSetPoint: "ReeferTemperatureBelowSetPoint",
        ScheduledMaintenanceDate: "ScheduledMaintenanceDate",
        ScheduledMaintenanceEngineHours: "ScheduledMaintenanceEngineHours",
        ScheduledMaintenanceOdometer: "ScheduledMaintenanceOdometer",
        UnsafeDvir: "UnsafeDvir",
        SafeDvirWithDefects: "SafeDvirWithDefects",
        PanicButtonPressed: "PanicButtonPressed",
    } as const;

    export interface Device {
        /** ID of the Vehicle or Asset */
        id?: number;
        /** Name of the Vehicle or Asset */
        name?: string;
        /** Device serial number */
        serial?: string;
        /** VIN if the gateway is tied to a vehicle */
        vin?: string;
    }

    export interface Driver {
        /** ID of the Driver */
        id?: number;
        /** Name of the Driver */
        name?: string;
    }

    /**
     * DVIR-specific fields
     */
    export interface Dvir {
        /** ID of the DVIR */
        dvirId?: string;
        vehicle?: Dvir.Vehicle;
        trailer?: Dvir.Trailer;
        driver?: Dvir.Driver;
        /** Odometer value in meters */
        odometer?: number;
        inspectionType?: Dvir.InspectionType;
        safetyStatus?: Dvir.SafetyStatus;
        defects?: Dvir.Defects.Item[];
    }

    export namespace Dvir {
        export interface Vehicle {
            /** ID of the Vehicle */
            id?: string;
            /** Name of the Vehicle */
            name?: string;
        }

        export interface Trailer {
            /** ID of the Trailer */
            id?: string;
            /** Name of the Trailer */
            name?: string;
        }

        export interface Driver {
            /** ID of the Driver */
            id?: string;
            /** Name of the Driver */
            name?: string;
        }

        export type InspectionType = "preTrip" | "postTrip" | "mechanic" | "unspecified";
        export const InspectionType = {
            PreTrip: "preTrip",
            PostTrip: "postTrip",
            Mechanic: "mechanic",
            Unspecified: "unspecified",
        } as const;
        export type SafetyStatus = "safe" | "unsafe";
        export const SafetyStatus = {
            Safe: "safe",
            Unsafe: "unsafe",
        } as const;
        export type Defects = Defects.Item[];

        export namespace Defects {
            export interface Item {
                /** ID of the defect */
                id?: string;
                /** Creation timestamp */
                createdAt?: string;
                /** Type of defect */
                defectType?: string;
                /** Defect comment */
                comment?: string;
            }
        }
    }
}
