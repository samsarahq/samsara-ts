/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Samsara from "../index.js";

/**
 * A single document.
 */
export interface DocumentResponseObjectResponseBody {
    /** List of the document conditional field sections. */
    conditionalFieldSections?: Samsara.ConditionalFieldSectionObjectResponseBody[];
    /** Time the document was created in RFC 3339 format. */
    createdAtTime: string;
    documentType: Samsara.GoaDocumentTypeTinyResponseResponseBody;
    driver: Samsara.GoaDriverTinyResponseResponseBody;
    /** The fields associated with this document. */
    fields: Samsara.FieldObjectResponseBody[];
    /** Universally unique identifier for the document. */
    id: string;
    /** Name of the document. */
    name?: string;
    /** Notes on the document. */
    notes?: string;
    route?: Samsara.GoaRouteTinyResponseResponseBody;
    routeStop?: Samsara.GoaRouteStopTinyResponseResponseBody;
    /** The condition of the document created for the driver. Can be either Required or Submitted. Required documents are pre-populated documents for the Driver to fill out in the Driver App and have not yet been submitted. Submitted documents have been submitted by the driver in the Driver App. Archived documents have been archived by the admin in the cloud dashboard.  Valid values: `submitted`, `required`, `archived` */
    state: DocumentResponseObjectResponseBody.State;
    /** Time the document was updated in RFC 3339 format. */
    updatedAtTime?: string;
    vehicle?: Samsara.GoaVehicleTinyResponseResponseBody;
}

export namespace DocumentResponseObjectResponseBody {
    /**
     * The condition of the document created for the driver. Can be either Required or Submitted. Required documents are pre-populated documents for the Driver to fill out in the Driver App and have not yet been submitted. Submitted documents have been submitted by the driver in the Driver App. Archived documents have been archived by the admin in the cloud dashboard.  Valid values: `submitted`, `required`, `archived`
     */
    export type State = "submitted" | "required" | "archived";
    export const State = {
        Submitted: "submitted",
        Required: "required",
        Archived: "archived",
    } as const;
}
