/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { SamsaraClient } from "../../../src/Client";

describe("DriverApp", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                driverFleetId: "abc_trucking_co",
                gamification: true,
                gamificationConfig: { anonymizeDriverNames: false },
                orgVehicleSearch: false,
                trailerSelection: false,
                trailerSelectionConfig: {
                    driverTrailerCreationEnabled: false,
                    maxNumOfTrailersSelected: 1,
                    orgTrailerSearch: false,
                },
            },
        };
        server
            .mockEndpoint()
            .get("/fleet/settings/driver-app")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.settings.driverApp.get();
        expect(response).toEqual({
            data: {
                driverFleetId: "abc_trucking_co",
                gamification: true,
                gamificationConfig: {
                    anonymizeDriverNames: false,
                },
                orgVehicleSearch: false,
                trailerSelection: false,
                trailerSelectionConfig: {
                    driverTrailerCreationEnabled: false,
                    maxNumOfTrailersSelected: 1,
                    orgTrailerSearch: false,
                },
            },
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            data: {
                driverFleetId: "abc_trucking_co",
                gamification: true,
                gamificationConfig: { anonymizeDriverNames: false },
                orgVehicleSearch: false,
                trailerSelection: false,
                trailerSelectionConfig: {
                    driverTrailerCreationEnabled: false,
                    maxNumOfTrailersSelected: 1,
                    orgTrailerSearch: false,
                },
            },
        };
        server
            .mockEndpoint()
            .patch("/fleet/settings/driver-app")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.settings.driverApp.update();
        expect(response).toEqual({
            data: {
                driverFleetId: "abc_trucking_co",
                gamification: true,
                gamificationConfig: {
                    anonymizeDriverNames: false,
                },
                orgVehicleSearch: false,
                trailerSelection: false,
                trailerSelectionConfig: {
                    driverTrailerCreationEnabled: false,
                    maxNumOfTrailersSelected: 1,
                    orgTrailerSearch: false,
                },
            },
        });
    });
});
