/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { SamsaraApiClient } from "../../src/Client";

describe("Trailers", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraApiClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });
        const rawRequestBody = { name: "Trailer-123" };
        const rawResponseBody = {
            data: {
                attributes: [
                    { id: "494123", name: "Compliance/ELD", numberValues: [867, 5309], stringValues: ["HQ", "Leased"] },
                ],
                enabledForMobile: true,
                externalIds: { key: "value" },
                id: "494123",
                installedGateway: { model: "AG15", serial: "GFRV-43N-VGX" },
                licensePlate: "7TYP290",
                name: "Trailer-123",
                notes: "These are my trailer notes",
                tags: [{ id: "3914", name: "East Coast", parentTagId: "4815" }],
                trailerSerialNumber: "8V8WD530FLN016251",
            },
        };
        server
            .mockEndpoint()
            .post("/fleet/trailers")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.trailers.create({
            name: "Trailer-123",
        });
        expect(response).toEqual({
            data: {
                attributes: [
                    {
                        id: "494123",
                        name: "Compliance/ELD",
                        numberValues: [867, 5309],
                        stringValues: ["HQ", "Leased"],
                    },
                ],
                enabledForMobile: true,
                externalIds: {
                    key: "value",
                },
                id: "494123",
                installedGateway: {
                    model: "AG15",
                    serial: "GFRV-43N-VGX",
                },
                licensePlate: "7TYP290",
                name: "Trailer-123",
                notes: "These are my trailer notes",
                tags: [
                    {
                        id: "3914",
                        name: "East Coast",
                        parentTagId: "4815",
                    },
                ],
                trailerSerialNumber: "8V8WD530FLN016251",
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraApiClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                attributes: [
                    { id: "494123", name: "Compliance/ELD", numberValues: [867, 5309], stringValues: ["HQ", "Leased"] },
                ],
                enabledForMobile: true,
                externalIds: { key: "value" },
                id: "494123",
                installedGateway: { model: "AG15", serial: "GFRV-43N-VGX" },
                licensePlate: "7TYP290",
                name: "Trailer-123",
                notes: "These are my trailer notes",
                tags: [{ id: "3914", name: "East Coast", parentTagId: "4815" }],
                trailerSerialNumber: "8V8WD530FLN016251",
            },
        };
        server.mockEndpoint().get("/fleet/trailers/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.trailers.get("id");
        expect(response).toEqual({
            data: {
                attributes: [
                    {
                        id: "494123",
                        name: "Compliance/ELD",
                        numberValues: [867, 5309],
                        stringValues: ["HQ", "Leased"],
                    },
                ],
                enabledForMobile: true,
                externalIds: {
                    key: "value",
                },
                id: "494123",
                installedGateway: {
                    model: "AG15",
                    serial: "GFRV-43N-VGX",
                },
                licensePlate: "7TYP290",
                name: "Trailer-123",
                notes: "These are my trailer notes",
                tags: [
                    {
                        id: "3914",
                        name: "East Coast",
                        parentTagId: "4815",
                    },
                ],
                trailerSerialNumber: "8V8WD530FLN016251",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraApiClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });

        server.mockEndpoint().delete("/fleet/trailers/id").respondWith().statusCode(200).build();

        const response = await client.trailers.delete("id");
        expect(response).toEqual(undefined);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraApiClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            data: {
                attributes: [
                    { id: "494123", name: "Compliance/ELD", numberValues: [867, 5309], stringValues: ["HQ", "Leased"] },
                ],
                enabledForMobile: true,
                externalIds: { key: "value" },
                id: "494123",
                installedGateway: { model: "AG15", serial: "GFRV-43N-VGX" },
                licensePlate: "7TYP290",
                name: "Trailer-123",
                notes: "These are my trailer notes",
                tags: [{ id: "3914", name: "East Coast", parentTagId: "4815" }],
                trailerSerialNumber: "8V8WD530FLN016251",
            },
        };
        server
            .mockEndpoint()
            .patch("/fleet/trailers/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.trailers.update("id");
        expect(response).toEqual({
            data: {
                attributes: [
                    {
                        id: "494123",
                        name: "Compliance/ELD",
                        numberValues: [867, 5309],
                        stringValues: ["HQ", "Leased"],
                    },
                ],
                enabledForMobile: true,
                externalIds: {
                    key: "value",
                },
                id: "494123",
                installedGateway: {
                    model: "AG15",
                    serial: "GFRV-43N-VGX",
                },
                licensePlate: "7TYP290",
                name: "Trailer-123",
                notes: "These are my trailer notes",
                tags: [
                    {
                        id: "3914",
                        name: "East Coast",
                        parentTagId: "4815",
                    },
                ],
                trailerSerialNumber: "8V8WD530FLN016251",
            },
        });
    });
});
