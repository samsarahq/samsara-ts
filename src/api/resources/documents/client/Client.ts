/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Samsara from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index.js";
import { Pdfs } from "../resources/pdfs/client/Client.js";

export declare namespace Documents {
    export interface Options {
        environment?: core.Supplier<environments.SamsaraEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-Samsara-Version header */
        version?: "2025-05-12";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        /** Override the X-Samsara-Version header */
        version?: "2025-05-12";
    }
}

export class Documents {
    protected readonly _options: Documents.Options;
    protected _pdfs: Pdfs | undefined;

    constructor(_options: Documents.Options = {}) {
        this._options = _options;
    }

    public get pdfs(): Pdfs {
        return (this._pdfs ??= new Pdfs(this._options));
    }

    /**
     * Get all documents for the given time range. The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/getDriverDocumentsByOrgId).
     *
     *  <b>Rate limit:</b> 5 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).
     *
     * To use this endpoint, select **Read Documents** under the Driver Workflow category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>
     *
     *
     *  **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.
     *
     * @param {Samsara.DocumentsListRequest} request
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Samsara.UnauthorizedError}
     * @throws {@link Samsara.NotFoundError}
     * @throws {@link Samsara.MethodNotAllowedError}
     * @throws {@link Samsara.TooManyRequestsError}
     * @throws {@link Samsara.InternalServerError}
     * @throws {@link Samsara.NotImplementedError}
     * @throws {@link Samsara.BadGatewayError}
     * @throws {@link Samsara.ServiceUnavailableError}
     * @throws {@link Samsara.GatewayTimeoutError}
     *
     * @example
     *     await client.documents.list({
     *         startTime: "startTime",
     *         endTime: "endTime"
     *     })
     */
    public async list(
        request: Samsara.DocumentsListRequest,
        requestOptions?: Documents.RequestOptions,
    ): Promise<core.Page<Samsara.DocumentResponseObjectResponseBody>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: Samsara.DocumentsListRequest,
            ): Promise<core.WithRawResponse<Samsara.DocumentsGetDocumentsResponseBody>> => {
                const { startTime, endTime, after, documentTypeId, queryBy } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                _queryParams["startTime"] = startTime;
                _queryParams["endTime"] = endTime;
                if (after != null) {
                    _queryParams["after"] = after;
                }
                if (documentTypeId != null) {
                    _queryParams["documentTypeId"] = documentTypeId;
                }
                if (queryBy != null) {
                    _queryParams["queryBy"] = queryBy;
                }
                const _response = await core.fetcher({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.SamsaraEnvironment.ProductionApi,
                        "fleet/documents",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({
                            Authorization: await this._getAuthorizationHeader(),
                            "X-Samsara-Version": requestOptions?.version,
                        }),
                        requestOptions?.headers,
                    ),
                    queryParameters: _queryParams,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as Samsara.DocumentsGetDocumentsResponseBody,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 401:
                            throw new Samsara.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                        case 404:
                            throw new Samsara.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                        case 405:
                            throw new Samsara.MethodNotAllowedError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 429:
                            throw new Samsara.TooManyRequestsError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 500:
                            throw new Samsara.InternalServerError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 501:
                            throw new Samsara.NotImplementedError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 502:
                            throw new Samsara.BadGatewayError(_response.error.body as unknown, _response.rawResponse);
                        case 503:
                            throw new Samsara.ServiceUnavailableError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 504:
                            throw new Samsara.GatewayTimeoutError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        default:
                            throw new errors.SamsaraError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SamsaraError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SamsaraTimeoutError("Timeout exceeded when calling GET /fleet/documents.");
                    case "unknown":
                        throw new errors.SamsaraError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<Samsara.DocumentsGetDocumentsResponseBody, Samsara.DocumentResponseObjectResponseBody>(
            {
                response: dataWithRawResponse.data,
                rawResponse: dataWithRawResponse.rawResponse,
                hasNextPage: (response) => response?.pagination?.endCursor != null,
                getItems: (response) => response?.data ?? [],
                loadPage: (response) => {
                    return list(core.setObjectProperty(request, "after", response?.pagination?.endCursor));
                },
            },
        );
    }

    /**
     * Creates a single document. The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/createDriverDocument).
     *
     *  <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).
     *
     * To use this endpoint, select **Write Documents** under the Driver Workflow category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>
     *
     *
     *  **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.
     *
     * @param {Samsara.DocumentsPostDocumentRequestBody} request
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Samsara.UnauthorizedError}
     * @throws {@link Samsara.NotFoundError}
     * @throws {@link Samsara.MethodNotAllowedError}
     * @throws {@link Samsara.TooManyRequestsError}
     * @throws {@link Samsara.InternalServerError}
     * @throws {@link Samsara.NotImplementedError}
     * @throws {@link Samsara.BadGatewayError}
     * @throws {@link Samsara.ServiceUnavailableError}
     * @throws {@link Samsara.GatewayTimeoutError}
     *
     * @example
     *     await client.documents.create({
     *         documentTypeId: "9814a1fa-f0c6-408b-bf85-51dc3bc71ac7",
     *         driverId: "45646"
     *     })
     */
    public create(
        request: Samsara.DocumentsPostDocumentRequestBody,
        requestOptions?: Documents.RequestOptions,
    ): core.HttpResponsePromise<Samsara.DocumentsPostDocumentResponseBody> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Samsara.DocumentsPostDocumentRequestBody,
        requestOptions?: Documents.RequestOptions,
    ): Promise<core.WithRawResponse<Samsara.DocumentsPostDocumentResponseBody>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SamsaraEnvironment.ProductionApi,
                "fleet/documents",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Samsara-Version": requestOptions?.version,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Samsara.DocumentsPostDocumentResponseBody,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Samsara.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Samsara.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 405:
                    throw new Samsara.MethodNotAllowedError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Samsara.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Samsara.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 501:
                    throw new Samsara.NotImplementedError(_response.error.body as unknown, _response.rawResponse);
                case 502:
                    throw new Samsara.BadGatewayError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Samsara.ServiceUnavailableError(_response.error.body as unknown, _response.rawResponse);
                case 504:
                    throw new Samsara.GatewayTimeoutError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.SamsaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SamsaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SamsaraTimeoutError("Timeout exceeded when calling POST /fleet/documents.");
            case "unknown":
                throw new errors.SamsaraError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns a single document. The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/getDriverDocumentByIdAndDriverId).
     *
     *  <b>Rate limit:</b> 25 requests/sec (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).
     *
     * To use this endpoint, select **Read Documents** under the Driver Workflow category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>
     *
     *
     *  **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.
     *
     * @param {string} id - ID of the document
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Samsara.UnauthorizedError}
     * @throws {@link Samsara.NotFoundError}
     * @throws {@link Samsara.MethodNotAllowedError}
     * @throws {@link Samsara.TooManyRequestsError}
     * @throws {@link Samsara.InternalServerError}
     * @throws {@link Samsara.NotImplementedError}
     * @throws {@link Samsara.BadGatewayError}
     * @throws {@link Samsara.ServiceUnavailableError}
     * @throws {@link Samsara.GatewayTimeoutError}
     *
     * @example
     *     await client.documents.get("id")
     */
    public get(
        id: string,
        requestOptions?: Documents.RequestOptions,
    ): core.HttpResponsePromise<Samsara.DocumentsGetDocumentResponseBody> {
        return core.HttpResponsePromise.fromPromise(this.__get(id, requestOptions));
    }

    private async __get(
        id: string,
        requestOptions?: Documents.RequestOptions,
    ): Promise<core.WithRawResponse<Samsara.DocumentsGetDocumentResponseBody>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SamsaraEnvironment.ProductionApi,
                `fleet/documents/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Samsara-Version": requestOptions?.version,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Samsara.DocumentsGetDocumentResponseBody,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Samsara.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Samsara.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 405:
                    throw new Samsara.MethodNotAllowedError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Samsara.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Samsara.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 501:
                    throw new Samsara.NotImplementedError(_response.error.body as unknown, _response.rawResponse);
                case 502:
                    throw new Samsara.BadGatewayError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Samsara.ServiceUnavailableError(_response.error.body as unknown, _response.rawResponse);
                case 504:
                    throw new Samsara.GatewayTimeoutError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.SamsaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SamsaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SamsaraTimeoutError("Timeout exceeded when calling GET /fleet/documents/{id}.");
            case "unknown":
                throw new errors.SamsaraError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deletes a single document. The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/deleteDriverDocumentByIdAndDriverId).
     *
     *  <b>Rate limit:</b> 100 requests/min (learn more about rate limits <a href="https://developers.samsara.com/docs/rate-limits" target="_blank">here</a>).
     *
     * To use this endpoint, select **Write Documents** under the Driver Workflow category when creating or editing an API token. <a href="https://developers.samsara.com/docs/authentication#scopes-for-api-tokens" target="_blank">Learn More.</a>
     *
     *
     *  **Submit Feedback**: Likes, dislikes, and API feature requests should be filed as feedback in our <a href="https://forms.gle/zkD4NCH7HjKb7mm69" target="_blank">API feedback form</a>. If you encountered an issue or noticed inaccuracies in the API documentation, please <a href="https://www.samsara.com/help" target="_blank">submit a case</a> to our support team.
     *
     * @param {string} id - ID of the document to delete
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Samsara.UnauthorizedError}
     * @throws {@link Samsara.NotFoundError}
     * @throws {@link Samsara.MethodNotAllowedError}
     * @throws {@link Samsara.TooManyRequestsError}
     * @throws {@link Samsara.InternalServerError}
     * @throws {@link Samsara.NotImplementedError}
     * @throws {@link Samsara.BadGatewayError}
     * @throws {@link Samsara.ServiceUnavailableError}
     * @throws {@link Samsara.GatewayTimeoutError}
     *
     * @example
     *     await client.documents.delete("id")
     */
    public delete(id: string, requestOptions?: Documents.RequestOptions): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__delete(id, requestOptions));
    }

    private async __delete(id: string, requestOptions?: Documents.RequestOptions): Promise<core.WithRawResponse<void>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SamsaraEnvironment.ProductionApi,
                `fleet/documents/${encodeURIComponent(id)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Samsara-Version": requestOptions?.version,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Samsara.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Samsara.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 405:
                    throw new Samsara.MethodNotAllowedError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Samsara.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Samsara.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 501:
                    throw new Samsara.NotImplementedError(_response.error.body as unknown, _response.rawResponse);
                case 502:
                    throw new Samsara.BadGatewayError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Samsara.ServiceUnavailableError(_response.error.body as unknown, _response.rawResponse);
                case 504:
                    throw new Samsara.GatewayTimeoutError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.SamsaraError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SamsaraError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SamsaraTimeoutError("Timeout exceeded when calling DELETE /fleet/documents/{id}.");
            case "unknown":
                throw new errors.SamsaraError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["SAMSARA_API_KEY"];
        if (bearer == null) {
            throw new errors.SamsaraError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a SAMSARA_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
