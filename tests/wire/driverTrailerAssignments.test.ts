/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { SamsaraApiClient } from "../../src/Client";

describe("DriverTrailerAssignments", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraApiClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });
        const rawRequestBody = { driverId: "494123", trailerId: "12345" };
        const rawResponseBody = {
            data: {
                createdAtTime: "2019-06-13T19:08:25Z",
                driverId: "0987",
                id: "08b3aeada5f4ab3010c0b4efa28d2d1890dbf8d48d2d6",
                startTime: "2019-06-13T19:08:25Z",
                trailerId: "494123",
                updatedAtTime: "2019-06-13T19:08:25Z",
            },
        };
        server
            .mockEndpoint()
            .post("/driver-trailer-assignments")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.driverTrailerAssignments.create({
            driverId: "494123",
            trailerId: "12345",
        });
        expect(response).toEqual({
            data: {
                createdAtTime: "2019-06-13T19:08:25Z",
                driverId: "0987",
                id: "08b3aeada5f4ab3010c0b4efa28d2d1890dbf8d48d2d6",
                startTime: "2019-06-13T19:08:25Z",
                trailerId: "494123",
                updatedAtTime: "2019-06-13T19:08:25Z",
            },
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraApiClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });
        const rawRequestBody = { endTime: "2019-06-13T19:08:25Z" };
        const rawResponseBody = {
            data: {
                createdAtTime: "2019-06-13T19:08:25Z",
                driverId: "0987",
                endTime: "2019-06-13T19:08:25Z",
                id: "08b3aeada5f4ab3010c0b4efa28d2d1890dbf8d48d2d6",
                startTime: "2019-06-13T19:08:25Z",
                trailerId: "494123",
                updatedAtTime: "2019-06-13T19:08:25Z",
            },
        };
        server
            .mockEndpoint()
            .patch("/driver-trailer-assignments")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.driverTrailerAssignments.update({
            id: "id",
            endTime: "2019-06-13T19:08:25Z",
        });
        expect(response).toEqual({
            data: {
                createdAtTime: "2019-06-13T19:08:25Z",
                driverId: "0987",
                endTime: "2019-06-13T19:08:25Z",
                id: "08b3aeada5f4ab3010c0b4efa28d2d1890dbf8d48d2d6",
                startTime: "2019-06-13T19:08:25Z",
                trailerId: "494123",
                updatedAtTime: "2019-06-13T19:08:25Z",
            },
        });
    });
});
