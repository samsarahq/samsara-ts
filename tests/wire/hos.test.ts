/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { SamsaraClient } from "../../src/Client";

describe("Hos", () => {
    test("clocks", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    currentVehicle: {
                        ExternalIds: { maintenanceId: "250020", payrollId: "ABFS18600" },
                        id: "123456789",
                        name: "Midwest Truck #4",
                    },
                    driver: { id: "88668", name: "Susan Bob" },
                    violations: { cycleViolationDurationMs: 39600000, shiftDrivingViolationDurationMs: 39600000 },
                },
            ],
            pagination: { endCursor: "MjkY", hasNextPage: true },
        };
        server.mockEndpoint().get("/fleet/hos/clocks").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.hos.clocks();
        expect(response).toEqual({
            data: [
                {
                    currentVehicle: {
                        ExternalIds: {
                            maintenanceId: "250020",
                            payrollId: "ABFS18600",
                        },
                        id: "123456789",
                        name: "Midwest Truck #4",
                    },
                    driver: {
                        id: "88668",
                        name: "Susan Bob",
                    },
                    violations: {
                        cycleViolationDurationMs: 39600000,
                        shiftDrivingViolationDurationMs: 39600000,
                    },
                },
            ],
            pagination: {
                endCursor: "MjkY",
                hasNextPage: true,
            },
        });
    });

    test("logs", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    driver: { id: "88668", name: "Susan Bob" },
                    hosLogs: [
                        {
                            logEndTime: "2020-01-27T07:06:25Z",
                            logRecordedLocation: { latitude: 122.142, longitude: -93.343 },
                            logStartTime: "2020-01-27T07:06:25Z",
                            remark: "Lunch Break",
                        },
                    ],
                },
            ],
            pagination: { endCursor: "MjkY", hasNextPage: true },
        };
        server.mockEndpoint().get("/fleet/hos/logs").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.hos.logs();
        expect(response).toEqual({
            data: [
                {
                    driver: {
                        id: "88668",
                        name: "Susan Bob",
                    },
                    hosLogs: [
                        {
                            logEndTime: "2020-01-27T07:06:25Z",
                            logRecordedLocation: {
                                latitude: 122.142,
                                longitude: -93.343,
                            },
                            logStartTime: "2020-01-27T07:06:25Z",
                            remark: "Lunch Break",
                        },
                    ],
                },
            ],
            pagination: {
                endCursor: "MjkY",
                hasNextPage: true,
            },
        });
    });
});
