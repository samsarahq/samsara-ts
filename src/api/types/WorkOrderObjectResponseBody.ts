/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Samsara from "../index.js";

/**
 * A work order object.
 */
export interface WorkOrderObjectResponseBody {
    /** The time the work order was archived in RFC 3339 format. */
    archivedAtTime?: string;
    /** The ID of the asset. */
    assetId: string;
    /** The ID of the assigned mechanic. */
    assignedUserId?: string;
    /** Files attached to the work order. */
    attachments?: Samsara.WorkOrderAttachmentObjectResponseBody[];
    /** The category of the work order  Valid values: `Annual`, `Corrective`, `Damage Repair`, `Preventive`, `Recall`, `Unspecified` */
    category?: WorkOrderObjectResponseBody.Category;
    /** Notes on the work order. */
    closingNotes?: string;
    /** The time the work order was completed in RFC 3339 format. */
    completedAtTime?: string;
    /** The time the work order was created in RFC 3339 format. */
    createdAtTime: string;
    /** The ID of the creator of the work order. */
    createdByUserId?: string;
    /** A description of what needs to be fixed. */
    description?: string;
    discount?: Samsara.WorkOrderDiscountObjectResponseBody;
    /** The due date of the work order in RFC 3339 format. */
    dueAtTime?: string;
    /** The engine hours at the time of the work order. */
    engineHours?: number;
    /** The unique id of the work order. */
    id: string;
    /** Items related to the work order. */
    items?: Samsara.WorkOrderItemObjectResponseBody[];
    /** The odometer reading at the time of the work order. */
    odometerMeters?: number;
    /** The priority of the work order  Valid values: `High`, `Low`, `Medium`, `Urgent` */
    priority?: WorkOrderObjectResponseBody.Priority;
    /** Service Tasks for the work order. */
    serviceTaskInstances?: Samsara.ServiceTaskInstanceObjectResponseBody[];
    /** The status of the work order  Valid values: `Assigned`, `Cancelled`, `Closed`, `Completed`, `In Progress`, `On Hold`, `Open`, `Pending Approval`, `Pending Parts` */
    status: WorkOrderObjectResponseBody.Status;
    tax?: Samsara.WorkOrderTaxObjectResponseBody;
    /** The time the work order was last updated in RFC 3339 format. */
    updatedAtTime: string;
}

export namespace WorkOrderObjectResponseBody {
    /**
     * The category of the work order  Valid values: `Annual`, `Corrective`, `Damage Repair`, `Preventive`, `Recall`, `Unspecified`
     */
    export type Category = "Annual" | "Corrective" | "Damage Repair" | "Preventive" | "Recall" | "Unspecified";
    export const Category = {
        Annual: "Annual",
        Corrective: "Corrective",
        DamageRepair: "Damage Repair",
        Preventive: "Preventive",
        Recall: "Recall",
        Unspecified: "Unspecified",
    } as const;
    /**
     * The priority of the work order  Valid values: `High`, `Low`, `Medium`, `Urgent`
     */
    export type Priority = "High" | "Low" | "Medium" | "Urgent";
    export const Priority = {
        High: "High",
        Low: "Low",
        Medium: "Medium",
        Urgent: "Urgent",
    } as const;
    /**
     * The status of the work order  Valid values: `Assigned`, `Cancelled`, `Closed`, `Completed`, `In Progress`, `On Hold`, `Open`, `Pending Approval`, `Pending Parts`
     */
    export type Status =
        | "Assigned"
        | "Cancelled"
        | "Closed"
        | "Completed"
        | "In Progress"
        | "On Hold"
        | "Open"
        | "Pending Approval"
        | "Pending Parts";
    export const Status = {
        Assigned: "Assigned",
        Cancelled: "Cancelled",
        Closed: "Closed",
        Completed: "Completed",
        InProgress: "In Progress",
        OnHold: "On Hold",
        Open: "Open",
        PendingApproval: "Pending Approval",
        PendingParts: "Pending Parts",
    } as const;
}
