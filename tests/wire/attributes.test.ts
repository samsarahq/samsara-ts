/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { SamsaraApiClient } from "../../src/Client";

describe("Attributes", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraApiClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });
        const rawRequestBody = {
            attributeType: "string",
            attributeValueQuantity: "single",
            entityType: "driver",
            name: "License Certifications",
        };
        const rawResponseBody = {
            data: {
                entities: [{}],
                attributeType: "string",
                attributeValueQuantity: "single",
                entityType: "driver",
                id: "123e4567-e89b-12d3-a456-426614174000",
                name: "License Certifications",
                numberValues: [1.1],
                stringValues: ["stringValues"],
                values: [{ id: "123e4567-e89b-12d3-a456-426614174000", stringValue: "CDL" }],
            },
        };
        server
            .mockEndpoint()
            .post("/attributes")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.attributes.create({
            attributeType: "string",
            attributeValueQuantity: "single",
            entityType: "driver",
            name: "License Certifications",
        });
        expect(response).toEqual({
            data: {
                entities: [{}],
                attributeType: "string",
                attributeValueQuantity: "single",
                entityType: "driver",
                id: "123e4567-e89b-12d3-a456-426614174000",
                name: "License Certifications",
                numberValues: [1.1],
                stringValues: ["stringValues"],
                values: [
                    {
                        id: "123e4567-e89b-12d3-a456-426614174000",
                        stringValue: "CDL",
                    },
                ],
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraApiClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                entities: [{}],
                attributeType: "string",
                attributeValueQuantity: "single",
                entityType: "driver",
                id: "123e4567-e89b-12d3-a456-426614174000",
                name: "License Certifications",
                numberValues: [1.1],
                stringValues: ["stringValues"],
                values: [{ id: "123e4567-e89b-12d3-a456-426614174000", stringValue: "CDL" }],
            },
        };
        server.mockEndpoint().get("/attributes/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.attributes.get("id", {
            entityType: "driver",
        });
        expect(response).toEqual({
            data: {
                entities: [{}],
                attributeType: "string",
                attributeValueQuantity: "single",
                entityType: "driver",
                id: "123e4567-e89b-12d3-a456-426614174000",
                name: "License Certifications",
                numberValues: [1.1],
                stringValues: ["stringValues"],
                values: [
                    {
                        id: "123e4567-e89b-12d3-a456-426614174000",
                        stringValue: "CDL",
                    },
                ],
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraApiClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/attributes/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.attributes.delete("id", {
            entityType: "driver",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new SamsaraApiClient({ token: "test", version: "2025-05-12", environment: server.baseUrl });
        const rawRequestBody = { entityType: "driver" };
        const rawResponseBody = {
            data: {
                entities: [{}],
                attributeType: "string",
                attributeValueQuantity: "single",
                entityType: "driver",
                id: "123e4567-e89b-12d3-a456-426614174000",
                name: "License Certifications",
                numberValues: [1.1],
                stringValues: ["stringValues"],
                values: [{ id: "123e4567-e89b-12d3-a456-426614174000", stringValue: "CDL" }],
            },
        };
        server
            .mockEndpoint()
            .patch("/attributes/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.attributes.update("id", {
            entityType: "driver",
        });
        expect(response).toEqual({
            data: {
                entities: [{}],
                attributeType: "string",
                attributeValueQuantity: "single",
                entityType: "driver",
                id: "123e4567-e89b-12d3-a456-426614174000",
                name: "License Certifications",
                numberValues: [1.1],
                stringValues: ["stringValues"],
                values: [
                    {
                        id: "123e4567-e89b-12d3-a456-426614174000",
                        stringValue: "CDL",
                    },
                ],
            },
        });
    });
});
